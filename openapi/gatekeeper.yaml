openapi: 3.0.1
info:
  version: 1.0.0
  title: Gatekeeper API
  description: 'Gatekepeer offers an HTTP-based RESTful API. It has predictable URLs for all resources. Payload is formatted as JSON and it returns HTTP status codes to indicate errors.'

tags:
  - name: Intro
    description: intro here

  - name: Developer
    description: Operations on developers
  - name: Application
    description: Operations on applications
  - name: Key
    description: Operations on keys
  - name: APIProduct
    description: Operations on APIProducts

  - name: Listener
    description: Operations on listeners
  - name: Route
    description: Operations on routes
  - name: Cluster
    description: Operations on clusters

x-tagGroups:
  - name: HTTP forwarding
    tags:
      - Intro
      - Developer
      - Application
      - Key
      - APIProduct
      - Listener
      - Route
      - Cluster

paths:
  /v1/organizations/{organization_name}/developers:
    get:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - name: expand
          in: query
          description: Return full developer details
          required: false
          schema:
            type: boolean
        - name: count
          in: query
          description: maximum number of developers to return
          required: false
          schema:
            type: integer
      description: Retrieve all developers
      tags:
        - Developer
      responses:
        '200':
          description: Successfully retrieved all developers
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DevelopersEmailAddresses'
                  - $ref: '#/components/schemas/Developers'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      parameters:
        - $ref: '#/components/parameters/organization_name'
      description: Create new developer
      tags:
        - Developer
      requestBody:
        description: Details of developer to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Developer'
      responses:
        '201':
          description: Successfully created developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '400':
          $ref: '#/components/responses/BadRequest'
  /v1/organizations/{organization_name}/developers/{developer_emailaddress}:
    get:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
      description: Retrieve developer
      tags:
        - Developer
      responses:
        '200':
          description: Succesfully retrieved developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Developer to retrieve does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/action'
      description: Update developer
      tags:
        - Developer
      requestBody:
        description: Details of developer to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Developer'
          application/octet-stream:
            schema:
              type: string
      responses:
        '200':
          description: Succesfully updated developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Developer to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
      description: Delete developer
      tags:
        - Developer
      responses:
        '200':
          description: Succesfully deleted developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Developer to delete does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /v1/organizations/{organization_name}/developers/{developer_emailaddress}/attributes:
    get:
      description: Replace all attributes of a developer
      tags:
        - Developer
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
      responses:
        '200':
          $ref: '#/components/responses/AttributesRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: developer to Replace all attributes from does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      description: Replace all attributes of a developer
      tags:
        - Developer
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
      requestBody:
        description: Details of new attributes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attributes'
      responses:
        '200':
          $ref: '#/components/responses/AttributesUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: developer to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /v1/organizations/{organization_name}/developers/{developer_emailaddress}/attributes/{attribute_name}:
    get:
      description: Retrieve attribute of a developer
      tags:
        - Developer
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    post:
      description: Update attribute of a developer
      tags:
        - Developer
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/attribute_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          $ref: '#/components/responses/AttributeUpdated'
        '201':
          $ref: '#/components/responses/AttributeCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    delete:
      description: Delete attribute of a developer
      tags:
        - Developer
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeDeleted'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'

  /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps:
    get:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - name: expand
          in: query
          description: Return full details of each application
          required: false
          schema:
            type: boolean
        - name: count
          in: query
          description: Maximum number of applications to return
          required: false
          schema:
            type: integer
      description: Retrieve all applications of developer
      tags:
        - Application
      responses:
        '200':
          description: Successfully retrieved all applictions
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ApplicationNames'
                  - $ref: '#/components/schemas/Applications'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
      description: Create new application
      tags:
        - Application
      requestBody:
        description: Details of application to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          description: Successfully created application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/BadRequest'
  /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}:
    get:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/app_name'
      description: Retrieve application
      tags:
        - Application
      responses:
        '200':
          description: Succesfully retrieved application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Application to retrieve does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/app_name'
        - $ref: '#/components/parameters/action'
      description: Update application
      tags:
        - Application
      requestBody:
        description: Details of application to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
          application/octet-stream:
            schema:
              type: string
      responses:
        '200':
          description: Succesfully updated application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Application to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/app_name'
      description: Delete application
      tags:
        - Application
      responses:
        '200':
          description: Succesfully deleted application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Application to delete does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/attributes:
    get:
      description: Replace all attributes of an application
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/app_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributesRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: application to replace all attributes from does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      description: Replace all attributes of an application
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/app_name'
      requestBody:
        description: Details of new attributes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attributes'
      responses:
        '200':
          $ref: '#/components/responses/AttributesUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Application to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/attributes/{attribute_name}:
    get:
      description: Retrieve attribute of an application
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/app_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    post:
      description: Update attribute of an application
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/app_name'
        - $ref: '#/components/parameters/attribute_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          $ref: '#/components/responses/AttributeUpdated'
        '201':
          $ref: '#/components/responses/AttributeCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    delete:
      description: Delete attribute of an application
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/developer_emailaddress'
        - $ref: '#/components/parameters/app_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeDeleted'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'

  /v1/organizations/{organization_name}/apps:
    get:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - name: expand
          in: query
          description: Return full details of each application
          required: false
          schema:
            type: boolean
        - name: rows
          in: query
          description: Maximum number of applications to return
          required: false
          schema:
            type: integer
            format: int32
      description: Retrieve all applications
      tags:
        - Application
      responses:
        '200':
          description: Successfully retrieved all applictions
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ApplicationNames'
                  - $ref: '#/components/schemas/Applications'
        '400':
          $ref: '#/components/responses/BadRequest'
  /v1/organizations/{organization_name}/apps/{app_id}:
    get:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/app_id'
      description: Retrieve application by appId
      tags:
        - Application
      responses:
        '200':
          description: Succesfully retrieved application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Application to retrieve does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /v1/organizations/{organization_name}/apiproducts:
    get:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - name: expand
          in: query
          description: Return full APIProducts details
          required: false
          schema:
            type: boolean
        - name: count
          in: query
          description: maximum number of APIProducts to return
          required: false
          schema:
            type: integer
      description: Retrieve all APIProducts
      tags:
        - APIProduct
      responses:
        '200':
          description: Successfully retrieved all APIProducts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIProducts'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      parameters:
        - $ref: '#/components/parameters/organization_name'
      description: Create new APIProduct
      tags:
        - APIProduct
      requestBody:
        description: Details of APIProduct to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIProduct'
      responses:
        '201':
          description: Successfully created APIProduct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIProduct'
        '400':
          $ref: '#/components/responses/BadRequest'
  /v1/organizations/{organization_name}/apiproducts/{apiproduct_name}:
    get:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/apiproduct_name'
      description: Retrieve APIProduct
      tags:
        - APIProduct
      responses:
        '200':
          description: Succesfully retrieved APIProduct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIProduct'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: APIProduct to retrieve does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/apiproduct_name'
        - $ref: '#/components/parameters/action'
      description: Update APIProduct
      tags:
        - APIProduct
      requestBody:
        description: Details of APIProduct to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIProduct'
          application/octet-stream:
            schema:
              type: string
      responses:
        '200':
          description: Succesfully updated APIProduct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIProduct'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: APIProduct to update does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/apiproduct_name'
      description: Delete APIProduct
      tags:
        - APIProduct
      responses:
        '200':
          description: Succesfully deleted APIProduct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIProduct'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: APIProduct to delete does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /v1/organizations/{organization_name}/apiproducts/{apiproduct_name}/attributes:
    get:
      description: Replace all attributes of a APIProduct.
      tags:
        - APIProduct
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/apiproduct_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributesRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: APIProduct to replace all attributes from does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      description: Replace all attributes of an APIProduct.
      tags:
        - APIProduct
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/apiproduct_name'
      requestBody:
        description: Details of new attributes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attributes'
      responses:
        '200':
          $ref: '#/components/responses/AttributesUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: APIProduct to update does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /v1/organizations/{organization_name}/apiproducts/{apiproduct_name}/attributes/{attribute_name}:
    get:
      description: Retrieve attribute of a APIProduct.
      tags:
        - APIProduct
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/apiproduct_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    post:
      description: Update attribute of a APIProduct.
      tags:
        - APIProduct
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/apiproduct_name'
        - $ref: '#/components/parameters/attribute_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          $ref: '#/components/responses/AttributeUpdated'
        '201':
          $ref: '#/components/responses/AttributeCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    delete:
      description: Delete attribute of a APIProduct.
      tags:
        - APIProduct
      parameters:
        - $ref: '#/components/parameters/organization_name'
        - $ref: '#/components/parameters/apiproduct_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeDeleted'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'

  /v1/listeners:
    get:
      description: Retrieve all listeners
      tags:
        - Listener
      responses:
        '200':
          description: Successfully retrieved all listeners
          content:
            application/json:
              schema:
                type: object
                properties:
                  listeners:
                    type: array
                    items:
                      $ref: "#/components/schemas/Listener"
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      description: Create a new listener
      tags:
        - Listener
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Listener'
      responses:
        '200':
          description: Successfully created a new listener
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listener'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/listeners/{listener_name}:
    get:
      description: Retrieve listener
      tags:
        - Listener
      parameters:
        - $ref: '#/components/parameters/listener_name'
      responses:
        '200':
          description: Successfully retrieved listener
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listener'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Listener to retrieve does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      description: Update a listener
      tags:
        - Listener
      parameters:
        - $ref: '#/components/parameters/listener_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Listener'
      responses:
        '200':
          description: Successfully updated listener
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listener'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Listener to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: Delete a listener
      tags:
        - Listener
      parameters:
        - $ref: '#/components/parameters/listener_name'
      responses:
        '200':
          description: Successfully deleted a listener
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listener'
        '404':
          description: Listener to delete does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /v1/listeners/{listener_name}/attributes:
    get:
      description: Retrieve all attributes of a listener
      tags:
        - Listener
      parameters:
        - $ref: '#/components/parameters/listener_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributesRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Listener to Replace all attributes from does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      description: Replace all attributes of a listener
      tags:
        - Listener
      parameters:
        - $ref: '#/components/parameters/listener_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributesUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Listener to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /v1/listeners/{listener_name}/attributes/{attribute_name}:
    get:
      description: Retrieve attribute of a listener
      tags:
        - Listener
      parameters:
        - $ref: '#/components/parameters/listener_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    post:
      description: Update attribute of a listener
      tags:
        - Listener
      parameters:
        - $ref: '#/components/parameters/listener_name'
        - $ref: '#/components/parameters/attribute_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          $ref: '#/components/responses/AttributeUpdated'
        '201':
          $ref: '#/components/responses/AttributeCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    delete:
      description: Delete attribute of a listener
      tags:
        - Listener
      parameters:
        - $ref: '#/components/parameters/listener_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeDeleted'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'

  /v1/routes:
    get:
      description: Retrieve all routes
      tags:
        - Route
      responses:
        '200':
          description: Successfully retrieved all routes
          content:
            application/json:
              schema:
                type: object
                properties:
                  routes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Route"
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      description: Create a new route
      tags:
        - Route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Successfully created a new route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/routes/{route_name}:
    get:
      description: Retrieve route
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/route_name'
      responses:
        '200':
          description: Successfully retrieved route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Route to retrieve does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      description: Update a route
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/route_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Successfully updated route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Route to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: Delete a route
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/route_name'
      responses:
        '200':
          description: Successfully deleted a route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Route to delete does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /v1/routes/{route_name}/attributes:
    get:
      description: Retrieve all attributes of a route
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/route_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributesRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Route to Replace all attributes from does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      description: Replace all attributes of a route
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/route_name'
      requestBody:
        description: Details of new attributes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attributes'
      responses:
        '200':
          $ref: '#/components/responses/AttributesUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Route to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /v1/routes/{route_name}/attributes/{attribute_name}:
    get:
      description: Retrieve attribute of a route
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/route_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    post:
      description: Update attribute of a route
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/route_name'
        - $ref: '#/components/parameters/attribute_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          $ref: '#/components/responses/AttributeUpdated'
        '201':
          $ref: '#/components/responses/AttributeCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    delete:
      description: Delete attribute of a route
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/route_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeDeleted'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'

  /v1/clusters:
    get:
      description: Retrieve all clusters
      tags:
        - Cluster
      responses:
        '200':
          description: Successfully retrieved all clusters
          content:
            application/json:
              schema:
                type: object
                properties:
                  clusters:
                    type: array
                    items:
                      $ref: "#/components/schemas/Cluster"
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      description: Create a new cluster
      tags:
        - Cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cluster'
      responses:
        '200':
          description: Successfully created a new cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/clusters/{cluster_name}:
    get:
      description: Retrieve cluster
      tags:
        - Cluster
      parameters:
        - $ref: '#/components/parameters/cluster_name'
      responses:
        '200':
          description: Successfully retrieved cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Cluster to retrieve does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      description: Update a cluster
      tags:
        - Cluster
      parameters:
        - $ref: '#/components/parameters/cluster_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cluster'
      responses:
        '200':
          description: Successfully updated cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Cluster to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: Delete a cluster
      tags:
        - Cluster
      parameters:
        - $ref: '#/components/parameters/cluster_name'
      responses:
        '200':
          description: Successfully deleted a cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        '404':
          description: Cluster to delete does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /v1/clusters/{cluster_name}/attributes:
    get:
      description: Retrieve all attributes of a cluster
      tags:
        - Cluster
      parameters:
        - $ref: '#/components/parameters/cluster_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributesRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Cluster to Replace all attributes from does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      description: Replace all attributes of a cluster
      tags:
        - Cluster
      parameters:
        - $ref: '#/components/parameters/cluster_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributesUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Cluster to update does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /v1/clusters/{cluster_name}/attributes/{attribute_name}:
    get:
      description: Retrieve attribute of a cluster
      tags:
        - Cluster
      parameters:
        - $ref: '#/components/parameters/cluster_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeRetrieved'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    post:
      description: Update attribute of a cluster
      tags:
        - Cluster
      parameters:
        - $ref: '#/components/parameters/cluster_name'
        - $ref: '#/components/parameters/attribute_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          $ref: '#/components/responses/AttributeUpdated'
        '201':
          $ref: '#/components/responses/AttributeCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'
    delete:
      description: Delete attribute of a cluster
      tags:
        - Cluster
      parameters:
        - $ref: '#/components/parameters/cluster_name'
        - $ref: '#/components/parameters/attribute_name'
      responses:
        '200':
          $ref: '#/components/responses/AttributeDeleted'
        '404':
          $ref: '#/components/responses/AttributeDoesNotExist'

components:
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'

    AttributeRetrieved:
      description: Successfully retrieved attribute
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attribute'

    AttributeCreated:
      description: Successfully created attribute
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attribute'

    AttributeUpdated:
      description: Successfully updated attribute
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attribute'

    AttributeDoesNotExist:
      description: Attribute does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'

    AttributeDeleted:
      description: Successfully deleted attribute
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attribute'

    AttributesRetrieved:
      description: Successfully retrieved attributes
      content:
        application/json:
          schema:
            type: object
            properties:
              attributes:
                type: array
                items:
                  $ref: "#/components/schemas/Attribute"

    AttributesUpdated:
      description: Successfully replaced attributes
      content:
        application/json:
          schema:
            type: object
            properties:
              attributes:
                type: array
                items:
                  $ref: "#/components/schemas/Attribute"

  parameters:
    organization_name:
      name: organization_name
      in: path
      required: true
      schema:
        type: string
      description: Name of organization

    developer_emailaddress:
      name: developer_emailaddress
      in: path
      required: true
      schema:
        type: string
      description: Email address of developer

    app_name:
      name: app_name
      in: path
      required: true
      schema:
        type: string
      description: Application name

    app_id:
      name: app_id
      in: path
      required: true
      schema:
        type: string
      description: Application id

    apiproduct_name:
      name: apiproduct_name
      in: path
      required: true
      schema:
        type: string
      description: Name of APIProduct

    listener_name:
      name: listener_name
      in: path
      required: true
      schema:
        type: string
      description: Name of listener

    route_name:
      name: route_name
      in: path
      required: true
      schema:
        type: string
      description: Name of route

    cluster_name:
      name: cluster_name
      in: path
      required: true
      schema:
        type: string
      description: Name of cluster

    attribute_name:
      name: attribute_name
      in: path
      required: true
      schema:
        type: string
      description: Name of attribute

    action:
      name: action
      in: query
      schema:
        type: string
      description: Optional, request status change of developer to 'active' or 'inactive', requires Content-type to be set to 'application/octet-stream'.

  schemas:
    Developer:
      type: object
      properties:
        email:
          type: string
          description: Email address of developer
        developerId:
          type: string
          readOnly: true
          description: Internal id of developer
        userName:
          type: string
          description: Username
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        apps:
          type: array
          items:
            type: string
          description: Name of developer applications
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
        status:
          type: string
          description: Status of develoepr
        createdAt:
          type: integer
          format: int64
          readOnly: true
          description: Create timestamp in milliseconds since epoch.
        createdBy:
          type: string
          readOnly: true
          description: User who created this developer
        lastModifiedAt:
          type: integer
          format: int64
          readOnly: true
          description: Last modified timestamp in milliseconds since epoch.
        LastModifiedBy:
          type: string
          readOnly: true
          description: User who last updated this developer
    Developers:
      type: object
      properties:
        developer:
          type: array
          items:
            $ref: "#/components/schemas/Developer"
      description: All developer details
    DevelopersEmailAddresses:
      type: array
      items:
        type: string
      description: All developer email addresses

    Application:
      type: object
      properties:
        name:
          type: string
          description: Application name
        displayName:
          type: string
          readOnly: true
          description: Display name of application
        appId:
          type: string
          readOnly: true
          description: Application ID
        developerId:
          type: string
          readOnly: true
          description: Developer ID
        scopes:
          type: array
          items:
            type: string
          description: OAuth scopes
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
        status:
          type: string
          description: Status of application.
        callbackUrl:
          type: string
          description: OAuth callback URL.
        keyExpiresIn:
          type: integer
          format: int64
          description: Default time-to-live of new api keys.
        createdAt:
          type: integer
          format: int64
          readOnly: true
          description: Create timestamp in milliseconds since epoch.
        createdBy:
          type: string
          readOnly: true
          description: User who created this application
        lastModifiedAt:
          type: integer
          format: int64
          readOnly: true
          description: Last modified timestamp in milliseconds since epoch.
        LastModifiedBy:
          type: string
          readOnly: true
          description: User who last updated this application.
    Applications:
      type: object
      properties:
        application:
          type: array
          items:
            $ref: "#/components/schemas/Application"
      description: All application details
    ApplicationNames:
      type: array
      items:
        type: string
      description: Application names.

    APIProduct:
      type: object
      properties:
        approvalType:
          type: string
          readOnly: true
          description: Description of APIProduct.
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
        createdAt:
          type: integer
          format: int64
          readOnly: true
          description: Create timestamp in milliseconds since epoch.
        createdBy:
          type: string
          readOnly: true
          description: User who created this APIProduct.
        displayName:
          type: string
          readOnly: true
          description: Display name of APIProduct.
        description:
          type: string
          readOnly: true
          description: Description of APIProduct.
        lastModifiedAt:
          type: integer
          format: int64
          readOnly: true
          description: Last modified timestamp in milliseconds since epoch.
        LastModifiedBy:
          type: string
          readOnly: true
          description: User who last updated this APIProduct.
        name:
          type: string
          description: APIProduct name.
        apiResources:
          type: array
          items:
            type: string
          description: List of paths belonging to this APIProduct.
        policy:
          type: string
          description: List of policies to apply to APIProduct.
        routeGroup:
          type: string
          description: Route group this product belongs to.
        scopes:
          type: array
          items:
            type: string
          description: List of scopes this APIProduct belongs to
    APIProducts:
      type: object
      properties:
        apiProduct:
          type: array
          items:
            $ref: "#/components/schemas/APIProduct"
      description: All APIProduct details.

    Listener:
      type: object
      properties:
        name:
          type: string
          readOnly: true
          description: Name of listener
        displayName:
          type: string
        virtualHosts:
          type: array
          items:
            type: string
        port:
          type: integer
        routeGroup:
          type: string
        policies:
          type: string
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
        createdAt:
          type: integer
          format: int64
          readOnly: true
          description: Create timestamp in milliseconds since epoch.
        createdBy:
          type: string
          readOnly: true
          description: User which created this listener
        lastModifiedAt:
          type: string
          format: int64
          readOnly: true
          description: Last modified timestamp in milliseconds since epoch.
        LastModifiedBy:
          type: string
          readOnly: true
          description: User who last updated this listener
      required:
        - name

    Route:
      type: object
      properties:
        name:
          type: string
          readOnly: true
          description: Name of route
        displayName:
          type: string
        routeGroup:
          type: string
        path:
          type: string
        pathType:
          type: string
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
        createdAt:
          type: integer
          format: int64
          readOnly: true
          description: Create timestamp in milliseconds since epoch.
        createdBy:
          type: string
          readOnly: true
          description: User which created this route
        lastModifiedAt:
          type: integer
          format: int64
          readOnly: true
          description: Last modified timestamp in milliseconds since epoch.
        LastModifiedBy:
          type: string
          readOnly: true
          description: User who last updated this route
      required:
        - name

    Cluster:
      type: object
      properties:
        name:
          type: string
          readOnly: true
          description: Name of cluster
        displayName:
          type: string
        Attributes:
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
        createdAt:
          type: integer
          format: int64
          readOnly: true
          description: Create timestamp in milliseconds since epoch.
        createdBy:
          type: string
          readOnly: true
          description: User who created this cluster
        lastModifiedAt:
          type: integer
          format: int64
          readOnly: true
          description: Last modified timestamp in milliseconds since epoch.
        LastModifiedBy:
          type: string
          readOnly: true
          description: User who last updated this cluster
      required:
        - name

    Attribute:
      type: object
      properties:
        name:
          type: string
          description: Name of attribute
        value:
          type: string
          description: Value of attribute

    Attributes:
      type: object
      properties:
        attribute:
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
      description: All attributes

    ErrorMessage:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
