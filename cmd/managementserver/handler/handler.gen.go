// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package handler

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// APIProduct defines model for APIProduct.
type APIProduct struct {
	// List of paths belonging to this APIProduct.
	ApiResources *[]string `json:"apiResources,omitempty"`

	// Description of APIProduct.
	ApprovalType *string      `json:"approvalType,omitempty"`
	Attributes   *[]Attribute `json:"attributes,omitempty"`

	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// User who created this APIProduct.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description of APIProduct.
	Description *string `json:"description,omitempty"`

	// Display name of APIProduct.
	DisplayName *string `json:"displayName,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// User who last updated this APIProduct.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// APIProduct name. Can only be set when apiproduct is created
	Name *string `json:"name,omitempty"`

	// List of policies to apply to APIProduct.
	Policy *string `json:"policy,omitempty"`

	// Route group this product belongs to.
	RouteGroup *string `json:"routeGroup,omitempty"`

	// One or more scopes this APIProduct belongs to.
	Scopes *[]string `json:"scopes,omitempty"`
}

// All APIProduct details.
type APIProducts struct {
	ApiProduct *[]APIProduct `json:"apiProduct,omitempty"`
}

// Application defines model for Application.
type Application struct {
	// ApplicationID of this application.
	AppId      *string      `json:"appId,omitempty"`
	Attributes *[]Attribute `json:"attributes,omitempty"`

	// OAuth callback URL.
	CallbackUrl *string `json:"callbackUrl,omitempty"`

	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// User who created this application.
	CreatedBy   *string `json:"createdBy,omitempty"`
	Credentials *[]Key  `json:"credentials,omitempty"`

	// DeveloperID of developer that owns this application.
	DeveloperId *string `json:"developerId,omitempty"`

	// Display name of application.
	DisplayName *string `json:"displayName,omitempty"`

	// Default time-to-live of new api keys.
	KeyExpiresIn *int64 `json:"keyExpiresIn,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// User who last updated this application.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Application name. Can only be set when application is created.
	Name *string `json:"name,omitempty"`

	// OAuth scopes.
	Scopes *[]string `json:"scopes,omitempty"`

	// Status of application. Can be 'approved' or 'revoked'.
	Status *string `json:"status,omitempty"`
}

// Application names.
type ApplicationNames []string

// ApplicationUpdate defines model for ApplicationUpdate.
type ApplicationUpdate struct {
	// Names of APIProducts to assign to newly created key.
	ApiProducts *[]string    `json:"apiProducts,omitempty"`
	Attributes  *[]Attribute `json:"attributes,omitempty"`

	// OAuth callback URL.
	CallbackUrl *string `json:"callbackUrl,omitempty"`

	// Display name of application.
	DisplayName *string `json:"displayName,omitempty"`

	// Default time-to-live of new api keys.
	KeyExpiresIn *int64 `json:"keyExpiresIn,omitempty"`

	// Application name. Can only be set when application is created.
	Name *string `json:"name,omitempty"`

	// OAuth scopes.
	Scopes *[]string `json:"scopes,omitempty"`

	// Status of application. Can be 'approved' or 'revoked'.
	Status *string `json:"status,omitempty"`
}

// All application details.
type Applications struct {
	Application *[]Application `json:"application,omitempty"`
}

// Attribute defines model for Attribute.
type Attribute struct {
	// Name of attribute.
	Name *string `json:"name,omitempty"`

	// Value of attribute.
	Value *string `json:"value,omitempty"`
}

// All attributes.
type Attributes struct {
	Attribute *[]Attribute `json:"attribute,omitempty"`
}

// Audit defines model for Audit.
type Audit struct {
	AppId        *string         `json:"appId,omitempty"`
	AuditId      *string         `json:"auditId,omitempty"`
	AuditType    *string         `json:"auditType,omitempty"`
	DeveloperId  *string         `json:"developerId,omitempty"`
	Entity       *AuditEntity    `json:"entity,omitempty"`
	Organization *string         `json:"organization,omitempty"`
	Requestor    *AuditRequestor `json:"requestor,omitempty"`

	// Timestamp of audit record in milliseconds since epoch.
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// AuditEntity defines model for AuditEntity.
type AuditEntity struct {
	// Id of entity.
	Id *string `json:"id,omitempty"`

	// New value of entity.
	NewValue *map[string]interface{} `json:"newValue,omitempty"`

	// Old value of entity.
	OldValue *map[string]interface{} `json:"oldValue,omitempty"`

	// Type of entity. (developer, app, key, etc.)
	Type *string `json:"type,omitempty"`
}

// AuditRequestor defines model for AuditRequestor.
type AuditRequestor struct {
	Ipaddress *string `json:"ipaddress,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
	Role      *string `json:"role,omitempty"`
	User      *string `json:"user,omitempty"`
	UserAgent *string `json:"userAgent,omitempty"`
}

// Array of audit records.
type Audits struct {
	Audit *[]Audit `json:"audit,omitempty"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	Attributes *[]Attribute `json:"attributes,omitempty"`

	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// User who created this cluster.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Display name of cluster.
	DisplayName *string `json:"displayName,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// User who last updated this cluster.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Name of cluster. Can only be set when cluster is created.
	Name string `json:"name"`
}

// Details of all clusters.
type Clusters struct {
	Clusters *[]Cluster `json:"clusters,omitempty"`
}

// Details of all companies.
type Companies struct {
	Company *[]Company `json:"company,omitempty"`
}

// Company defines model for Company.
type Company struct {
	// List of application names this company has. (retrieve only)
	Apps       *[]string    `json:"apps,omitempty"`
	Attributes *[]Attribute `json:"attributes,omitempty"`

	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// User who created this developer.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Display name of company.
	DisplayName *string `json:"displayName,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// User who last updated this developer.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Name of company.
	Name *string `json:"name,omitempty"`

	// Name of organization. (retrieve only)
	OrganizationName *string `json:"organizationName,omitempty"`

	// Status of company. Can be 'active' or 'inactive'.
	Status *string `json:"status,omitempty"`
}

// Developer defines model for Developer.
type Developer struct {
	// List of application names this developer has. (retrieve only)
	Apps       *[]string    `json:"apps,omitempty"`
	Attributes *[]Attribute `json:"attributes,omitempty"`

	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// User who created this developer.
	CreatedBy *string `json:"createdBy,omitempty"`

	// DeveloperID of developer. Cannot be updated.
	DeveloperId *string `json:"developerId,omitempty"`

	// Email address of developer.
	Email *string `json:"email,omitempty"`

	// First name of developer.
	FirstName *string `json:"firstName,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// User who last updated this developer.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Last name of developer.
	LastName *string `json:"lastName,omitempty"`

	// Name of organization.
	OrganizationName *string `json:"organizationName,omitempty"`

	// Status of developer. Can be 'active' or 'inactive'.
	Status *string `json:"status,omitempty"`

	// Username of developer.
	UserName *string `json:"userName,omitempty"`
}

// All developer details.
type Developers struct {
	Developer *[]Developer `json:"developer,omitempty"`
}

// All developer email addresses.
type DevelopersEmailAddresses []string

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Key defines model for Key.
type Key struct {
	ApiProducts *[]KeyProduct `json:"apiProducts,omitempty"`

	// AppID of application linked to key.
	AppID          *string      `json:"appID,omitempty"`
	Attributes     *[]Attribute `json:"attributes,omitempty"`
	ConsumerKey    *string      `json:"consumerKey,omitempty"`
	ConsumerSecret *string      `json:"consumerSecret,omitempty"`

	// Expiry timestamp of key in milliseconds since epoch. A value of -1 means key does not expire.
	ExpiresAt *int64 `json:"expiresAt,omitempty"`

	// Issue timestamp of key in milliseconds since epoch.
	IssuedAt *int64 `json:"issuedAt,omitempty"`

	// Status of key. Can be 'approved' or 'revoked'
	Status *string `json:"status,omitempty"`
}

// A product assigned to a key.
type KeyProduct struct {
	Apiproduct *string `json:"apiproduct,omitempty"`
	Status     *string `json:"status,omitempty"`
}

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Names of APIProducts to assign to key.
	ApiProducts *[]string    `json:"apiProducts,omitempty"`
	Attributes  *[]Attribute `json:"attributes,omitempty"`

	// Consumer key, cannot be changed as part of update.
	ConsumerKey *string `json:"consumerKey,omitempty"`

	// Consumer secret, cannot be changed as part of update.
	ConsumerSecret *string `json:"consumerSecret,omitempty"`

	// Expiry timestamp of key in milliseconds since epoch. A value of -1 means key does not expire.
	ExpiresAt *int64 `json:"expiresAt,omitempty"`

	// Issue timestamp of key in milliseconds since epoch.
	IssuedAt *int64 `json:"issuedAt,omitempty"`
}

// All keys of application.
type Keys struct {
	Key *[]Key `json:"key,omitempty"`
}

// Listener defines model for Listener.
type Listener struct {
	Attributes *[]Attribute `json:"attributes,omitempty"`

	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// User which created this listener.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Display name of lister.
	DisplayName *string `json:"displayName,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// User who last updated this listener.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Name of listener. Can only be set when listener is created.
	Name     string  `json:"name"`
	Policies *string `json:"policies,omitempty"`

	// Port number of this listener.
	Port       *int    `json:"port,omitempty"`
	RouteGroup *string `json:"routeGroup,omitempty"`

	// One or more virtual hosts this listener should match on.
	VirtualHosts *[]string `json:"virtualHosts,omitempty"`
}

// All listener details.
type Listeners struct {
	Listeners *[]Listener `json:"listeners,omitempty"`
}

// Organization defines model for Organization.
type Organization struct {
	Attributes *[]Attribute `json:"attributes,omitempty"`

	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// User who created this organization.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Display name of organization.
	DisplayName *string `json:"displayName,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// User who last updated this organization.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Name of organization.
	Name *string `json:"name,omitempty"`
}

// All organization details.
type Organizations struct {
	Organization *[]Organization `json:"organization,omitempty"`
}

// Role defines model for Role.
type Role struct {
	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// Role who created this role.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Display name of role.
	DisplayName *string `json:"displayName,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// Role who last updated this role.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Name of role. Can only be set at creation.
	Name        string             `json:"name"`
	Permissions *[]RolePermissions `json:"permissions,omitempty"`
}

// Methods and paths allowed by this role.
type RolePermissions struct {
	// If specified request must match one of these methods.
	Methods *[]string `json:"methods,omitempty"`

	// If specified request must match one of these paths.
	Paths *[]string `json:"paths,omitempty"`
}

// Array of users assigned to role.
type RoleUsers struct {
	User *string `json:"user,omitempty"`
}

// Roles defines model for Roles.
type Roles struct {
	Role *[]Role `json:"role,omitempty"`
}

// Route defines model for Route.
type Route struct {
	Attributes *[]Attribute `json:"attributes,omitempty"`

	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// User which created this route.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Display name of route.
	DisplayName *string `json:"displayName,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// User who last updated this route.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Name of route. Can only be set when route is created.
	Name string `json:"name"`

	// Path to match on.
	Path *string `json:"path,omitempty"`

	// Type of path matching to do, can be 'path' (exact match), 'prefix' or 'regexp'.
	PathType *string `json:"pathType,omitempty"`

	// Route group this route belongs to, must match up with Listeners routegroup.
	RouteGroup *string `json:"routeGroup,omitempty"`
}

// Details of all routes.
type Routes struct {
	Routes *[]Route `json:"routes,omitempty"`
}

// User defines model for User.
type User struct {
	// Create timestamp in milliseconds since epoch.
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// User who created this user.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Display name of user.
	DisplayName *string `json:"displayName,omitempty"`

	// Last modified timestamp in milliseconds since epoch.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`

	// User who last updated this user.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Name of user. Can only be set at creation.
	Name string `json:"name"`

	// Password of user. Update only, can not be retrieved.
	Password *string `json:"password,omitempty"`

	// Names of roles assigned to user.
	Roles *[]string `json:"roles,omitempty"`

	// Status of this user, can be 'active' or 'inactive'.
	Status *string `json:"status,omitempty"`
}

// Details of all users.
type Users struct {
	User *[]User `json:"user,omitempty"`
}

// Action defines model for action.
type Action string

// ApiproductName defines model for apiproduct_name.
type ApiproductName string

// AppId defines model for app_id.
type AppId string

// AppName defines model for app_name.
type AppName string

// AttributeName defines model for attribute_name.
type AttributeName string

// ClusterName defines model for cluster_name.
type ClusterName string

// CompanyName defines model for company_name.
type CompanyName string

// ConsumerKey defines model for consumer_key.
type ConsumerKey string

// Count defines model for count.
type Count int

// DeveloperEmailaddress defines model for developer_emailaddress.
type DeveloperEmailaddress string

// DeveloperId defines model for developer_id.
type DeveloperId string

// EndTime defines model for end_time.
type EndTime int

// KeyAction defines model for key_action.
type KeyAction string

// ListenerName defines model for listener_name.
type ListenerName string

// OrganizationName defines model for organization_name.
type OrganizationName string

// RoleName defines model for role_name.
type RoleName string

// RouteName defines model for route_name.
type RouteName string

// StartTime defines model for start_time.
type StartTime int

// UserName defines model for user_name.
type UserName string

// AttributeCreated defines model for AttributeCreated.
type AttributeCreated Attribute

// AttributeDeleted defines model for AttributeDeleted.
type AttributeDeleted Attribute

// AttributeDoesNotExist defines model for AttributeDoesNotExist.
type AttributeDoesNotExist ErrorMessage

// AttributeRetrieved defines model for AttributeRetrieved.
type AttributeRetrieved Attribute

// AttributeUpdated defines model for AttributeUpdated.
type AttributeUpdated Attribute

// AttributesRetrieved defines model for AttributesRetrieved.
type AttributesRetrieved struct {
	Attributes *[]Attribute `json:"attributes,omitempty"`
}

// AttributesUpdated defines model for AttributesUpdated.
type AttributesUpdated struct {
	Attributes *[]Attribute `json:"attributes,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest ErrorMessage

// GetV1AuditOrganizationsOrganizationNameParams defines parameters for GetV1AuditOrganizationsOrganizationName.
type GetV1AuditOrganizationsOrganizationNameParams struct {
	// Start timestamp in milliseconds since epoch.
	StartTime *StartTime `json:"startTime,omitempty"`

	// End timestamp in milliseconds since epoch.
	EndTime *EndTime `json:"endTime,omitempty"`

	// Maximum number of elements to return.
	Count *Count `json:"count,omitempty"`
}

// GetV1AuditOrganizationsOrganizationNameApiproductsApiproductNameParams defines parameters for GetV1AuditOrganizationsOrganizationNameApiproductsApiproductName.
type GetV1AuditOrganizationsOrganizationNameApiproductsApiproductNameParams struct {
	// Start timestamp in milliseconds since epoch.
	StartTime *StartTime `json:"startTime,omitempty"`

	// End timestamp in milliseconds since epoch.
	EndTime *EndTime `json:"endTime,omitempty"`

	// Maximum number of elements to return.
	Count *Count `json:"count,omitempty"`
}

// GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdParams defines parameters for GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperId.
type GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdParams struct {
	// Start timestamp in milliseconds since epoch.
	StartTime *StartTime `json:"startTime,omitempty"`

	// End timestamp in milliseconds since epoch.
	EndTime *EndTime `json:"endTime,omitempty"`

	// Maximum number of elements to return.
	Count *Count `json:"count,omitempty"`
}

// GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppIdParams defines parameters for GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppId.
type GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppIdParams struct {
	// Start timestamp in milliseconds since epoch.
	StartTime *StartTime `json:"startTime,omitempty"`

	// End timestamp in milliseconds since epoch.
	EndTime *EndTime `json:"endTime,omitempty"`

	// Maximum number of elements to return.
	Count *Count `json:"count,omitempty"`
}

// GetV1AuditUsersUserNameParams defines parameters for GetV1AuditUsersUserName.
type GetV1AuditUsersUserNameParams struct {
	// Start timestamp in milliseconds since epoch.
	StartTime *StartTime `json:"startTime,omitempty"`

	// End timestamp in milliseconds since epoch.
	EndTime *EndTime `json:"endTime,omitempty"`

	// Maximum number of elements to return.
	Count *Count `json:"count,omitempty"`
}

// PostV1ClustersJSONBody defines parameters for PostV1Clusters.
type PostV1ClustersJSONBody Cluster

// PostV1ClustersClusterNameJSONBody defines parameters for PostV1ClustersClusterName.
type PostV1ClustersClusterNameJSONBody Cluster

// PostV1ClustersClusterNameAttributesAttributeNameJSONBody defines parameters for PostV1ClustersClusterNameAttributesAttributeName.
type PostV1ClustersClusterNameAttributesAttributeNameJSONBody Attribute

// PostV1ListenersJSONBody defines parameters for PostV1Listeners.
type PostV1ListenersJSONBody Listener

// PostV1ListenersListenerNameJSONBody defines parameters for PostV1ListenersListenerName.
type PostV1ListenersListenerNameJSONBody Listener

// PostV1ListenersListenerNameAttributesAttributeNameJSONBody defines parameters for PostV1ListenersListenerNameAttributesAttributeName.
type PostV1ListenersListenerNameAttributesAttributeNameJSONBody Attribute

// PostV1OrganizationsJSONBody defines parameters for PostV1Organizations.
type PostV1OrganizationsJSONBody Organization

// PostV1OrganizationsOrganizationNameJSONBody defines parameters for PostV1OrganizationsOrganizationName.
type PostV1OrganizationsOrganizationNameJSONBody Organization

// GetV1OrganizationsOrganizationNameApiproductsParams defines parameters for GetV1OrganizationsOrganizationNameApiproducts.
type GetV1OrganizationsOrganizationNameApiproductsParams struct {
	// Return full APIProducts details.
	Expand *bool `json:"expand,omitempty"`

	// maximum number of APIProducts to return.
	Count *int `json:"count,omitempty"`
}

// PostV1OrganizationsOrganizationNameApiproductsJSONBody defines parameters for PostV1OrganizationsOrganizationNameApiproducts.
type PostV1OrganizationsOrganizationNameApiproductsJSONBody APIProduct

// PostV1OrganizationsOrganizationNameApiproductsApiproductNameJSONBody defines parameters for PostV1OrganizationsOrganizationNameApiproductsApiproductName.
type PostV1OrganizationsOrganizationNameApiproductsApiproductNameJSONBody APIProduct

// PostV1OrganizationsOrganizationNameApiproductsApiproductNameParams defines parameters for PostV1OrganizationsOrganizationNameApiproductsApiproductName.
type PostV1OrganizationsOrganizationNameApiproductsApiproductNameParams struct {
	// Optional, use 'action' or 'inactive' to status change. Requires Content-type to be set to 'application/octet-stream'.
	Action *Action `json:"action,omitempty"`
}

// PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesJSONBody defines parameters for PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes.
type PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesJSONBody Attributes

// PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeNameJSONBody defines parameters for PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName.
type PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeNameJSONBody Attribute

// GetV1OrganizationsOrganizationNameAppsParams defines parameters for GetV1OrganizationsOrganizationNameApps.
type GetV1OrganizationsOrganizationNameAppsParams struct {
	// If true, return full details of each application.
	Expand *bool `json:"expand,omitempty"`

	// Maximum number of applications to return.
	Rows *int32 `json:"rows,omitempty"`
}

// GetV1OrganizationsOrganizationNameCompaniesParams defines parameters for GetV1OrganizationsOrganizationNameCompanies.
type GetV1OrganizationsOrganizationNameCompaniesParams struct {
	// Return full companies details.
	Expand *bool `json:"expand,omitempty"`

	// maximum number of companies to return.
	Count *int `json:"count,omitempty"`
}

// PostV1OrganizationsOrganizationNameCompaniesJSONBody defines parameters for PostV1OrganizationsOrganizationNameCompanies.
type PostV1OrganizationsOrganizationNameCompaniesJSONBody Company

// PostV1OrganizationsOrganizationNameCompaniesCompanyNameJSONBody defines parameters for PostV1OrganizationsOrganizationNameCompaniesCompanyName.
type PostV1OrganizationsOrganizationNameCompaniesCompanyNameJSONBody Company

// PostV1OrganizationsOrganizationNameCompaniesCompanyNameParams defines parameters for PostV1OrganizationsOrganizationNameCompaniesCompanyName.
type PostV1OrganizationsOrganizationNameCompaniesCompanyNameParams struct {
	// Optional, use 'action' or 'inactive' to status change. Requires Content-type to be set to 'application/octet-stream'.
	Action *Action `json:"action,omitempty"`
}

// PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesJSONBody defines parameters for PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes.
type PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesJSONBody Attributes

// PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeNameJSONBody defines parameters for PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName.
type PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeNameJSONBody Attribute

// GetV1OrganizationsOrganizationNameDevelopersParams defines parameters for GetV1OrganizationsOrganizationNameDevelopers.
type GetV1OrganizationsOrganizationNameDevelopersParams struct {
	// Return full developer details.
	Expand *bool `json:"expand,omitempty"`

	// maximum number of developers to return.
	Count *int `json:"count,omitempty"`
}

// PostV1OrganizationsOrganizationNameDevelopersJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopers.
type PostV1OrganizationsOrganizationNameDevelopersJSONBody Developer

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressJSONBody Developer

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressParams defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressParams struct {
	// Optional, use 'action' or 'inactive' to status change. Requires Content-type to be set to 'application/octet-stream'.
	Action *Action `json:"action,omitempty"`
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsParams defines parameters for GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps.
type GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsParams struct {
	// If true, return full details of each application.
	Expand *bool `json:"expand,omitempty"`

	// Maximum number of applications to return.
	Count *int `json:"count,omitempty"`
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsJSONBody Application

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONBody Application

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameParams defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameParams struct {
	// Optional, use 'action' or 'inactive' to status change. Requires Content-type to be set to 'application/octet-stream'.
	Action *Action `json:"action,omitempty"`
}

// PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONBody defines parameters for PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName.
type PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONBody ApplicationUpdate

// PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameParams defines parameters for PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName.
type PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameParams struct {
	// Optional, use 'action' or 'inactive' to status change. Requires Content-type to be set to 'application/octet-stream'.
	Action *Action `json:"action,omitempty"`
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesJSONBody Attributes

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeNameJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeNameJSONBody Attribute

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreateJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreate.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreateJSONBody Key

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyJSONBody KeyUpdate

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyParams defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyParams struct {
	// Optional, use 'approve' or 'revoke' to update status of key. Requires Content-type to be set to 'application/octet-stream'.
	Action *KeyAction `json:"action,omitempty"`
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductNameJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductNameJSONBody KeyUpdate

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductNameParams defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductNameParams struct {
	// Optional, use 'approve' or 'revoke' to update status of key. Requires Content-type to be set to 'application/octet-stream'.
	Action *KeyAction `json:"action,omitempty"`
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesJSONBody Attributes

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeNameJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeNameJSONBody Attribute

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesJSONBody Attributes

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeNameJSONBody defines parameters for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeNameJSONBody Attribute

// PostV1RolesJSONBody defines parameters for PostV1Roles.
type PostV1RolesJSONBody Role

// PostV1RolesRoleNameJSONBody defines parameters for PostV1RolesRoleName.
type PostV1RolesRoleNameJSONBody Role

// PostV1RoutesJSONBody defines parameters for PostV1Routes.
type PostV1RoutesJSONBody Route

// PostV1RoutesRouteNameJSONBody defines parameters for PostV1RoutesRouteName.
type PostV1RoutesRouteNameJSONBody Route

// PostV1RoutesRouteNameAttributesJSONBody defines parameters for PostV1RoutesRouteNameAttributes.
type PostV1RoutesRouteNameAttributesJSONBody Attributes

// PostV1RoutesRouteNameAttributesAttributeNameJSONBody defines parameters for PostV1RoutesRouteNameAttributesAttributeName.
type PostV1RoutesRouteNameAttributesAttributeNameJSONBody Attribute

// PostV1UsersJSONBody defines parameters for PostV1Users.
type PostV1UsersJSONBody User

// PostV1UsersUserNameJSONBody defines parameters for PostV1UsersUserName.
type PostV1UsersUserNameJSONBody User

// PostV1ClustersJSONRequestBody defines body for PostV1Clusters for application/json ContentType.
type PostV1ClustersJSONRequestBody PostV1ClustersJSONBody

// PostV1ClustersClusterNameJSONRequestBody defines body for PostV1ClustersClusterName for application/json ContentType.
type PostV1ClustersClusterNameJSONRequestBody PostV1ClustersClusterNameJSONBody

// PostV1ClustersClusterNameAttributesAttributeNameJSONRequestBody defines body for PostV1ClustersClusterNameAttributesAttributeName for application/json ContentType.
type PostV1ClustersClusterNameAttributesAttributeNameJSONRequestBody PostV1ClustersClusterNameAttributesAttributeNameJSONBody

// PostV1ListenersJSONRequestBody defines body for PostV1Listeners for application/json ContentType.
type PostV1ListenersJSONRequestBody PostV1ListenersJSONBody

// PostV1ListenersListenerNameJSONRequestBody defines body for PostV1ListenersListenerName for application/json ContentType.
type PostV1ListenersListenerNameJSONRequestBody PostV1ListenersListenerNameJSONBody

// PostV1ListenersListenerNameAttributesAttributeNameJSONRequestBody defines body for PostV1ListenersListenerNameAttributesAttributeName for application/json ContentType.
type PostV1ListenersListenerNameAttributesAttributeNameJSONRequestBody PostV1ListenersListenerNameAttributesAttributeNameJSONBody

// PostV1OrganizationsJSONRequestBody defines body for PostV1Organizations for application/json ContentType.
type PostV1OrganizationsJSONRequestBody PostV1OrganizationsJSONBody

// PostV1OrganizationsOrganizationNameJSONRequestBody defines body for PostV1OrganizationsOrganizationName for application/json ContentType.
type PostV1OrganizationsOrganizationNameJSONRequestBody PostV1OrganizationsOrganizationNameJSONBody

// PostV1OrganizationsOrganizationNameApiproductsJSONRequestBody defines body for PostV1OrganizationsOrganizationNameApiproducts for application/json ContentType.
type PostV1OrganizationsOrganizationNameApiproductsJSONRequestBody PostV1OrganizationsOrganizationNameApiproductsJSONBody

// PostV1OrganizationsOrganizationNameApiproductsApiproductNameJSONRequestBody defines body for PostV1OrganizationsOrganizationNameApiproductsApiproductName for application/json ContentType.
type PostV1OrganizationsOrganizationNameApiproductsApiproductNameJSONRequestBody PostV1OrganizationsOrganizationNameApiproductsApiproductNameJSONBody

// PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesJSONRequestBody defines body for PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes for application/json ContentType.
type PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesJSONRequestBody PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesJSONBody

// PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeNameJSONRequestBody defines body for PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName for application/json ContentType.
type PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeNameJSONRequestBody PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeNameJSONBody

// PostV1OrganizationsOrganizationNameCompaniesJSONRequestBody defines body for PostV1OrganizationsOrganizationNameCompanies for application/json ContentType.
type PostV1OrganizationsOrganizationNameCompaniesJSONRequestBody PostV1OrganizationsOrganizationNameCompaniesJSONBody

// PostV1OrganizationsOrganizationNameCompaniesCompanyNameJSONRequestBody defines body for PostV1OrganizationsOrganizationNameCompaniesCompanyName for application/json ContentType.
type PostV1OrganizationsOrganizationNameCompaniesCompanyNameJSONRequestBody PostV1OrganizationsOrganizationNameCompaniesCompanyNameJSONBody

// PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesJSONRequestBody defines body for PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes for application/json ContentType.
type PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesJSONRequestBody PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesJSONBody

// PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeNameJSONRequestBody defines body for PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName for application/json ContentType.
type PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeNameJSONRequestBody PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeNameJSONBody

// PostV1OrganizationsOrganizationNameDevelopersJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopers for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONBody

// PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONRequestBody defines body for PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName for application/json ContentType.
type PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONRequestBody PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeNameJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeNameJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeNameJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreateJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreate for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreateJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreateJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductNameJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductNameJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductNameJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeNameJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeNameJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeNameJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesJSONBody

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeNameJSONRequestBody defines body for PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName for application/json ContentType.
type PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeNameJSONRequestBody PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeNameJSONBody

// PostV1RolesJSONRequestBody defines body for PostV1Roles for application/json ContentType.
type PostV1RolesJSONRequestBody PostV1RolesJSONBody

// PostV1RolesRoleNameJSONRequestBody defines body for PostV1RolesRoleName for application/json ContentType.
type PostV1RolesRoleNameJSONRequestBody PostV1RolesRoleNameJSONBody

// PostV1RoutesJSONRequestBody defines body for PostV1Routes for application/json ContentType.
type PostV1RoutesJSONRequestBody PostV1RoutesJSONBody

// PostV1RoutesRouteNameJSONRequestBody defines body for PostV1RoutesRouteName for application/json ContentType.
type PostV1RoutesRouteNameJSONRequestBody PostV1RoutesRouteNameJSONBody

// PostV1RoutesRouteNameAttributesJSONRequestBody defines body for PostV1RoutesRouteNameAttributes for application/json ContentType.
type PostV1RoutesRouteNameAttributesJSONRequestBody PostV1RoutesRouteNameAttributesJSONBody

// PostV1RoutesRouteNameAttributesAttributeNameJSONRequestBody defines body for PostV1RoutesRouteNameAttributesAttributeName for application/json ContentType.
type PostV1RoutesRouteNameAttributesAttributeNameJSONRequestBody PostV1RoutesRouteNameAttributesAttributeNameJSONBody

// PostV1UsersJSONRequestBody defines body for PostV1Users for application/json ContentType.
type PostV1UsersJSONRequestBody PostV1UsersJSONBody

// PostV1UsersUserNameJSONRequestBody defines body for PostV1UsersUserName for application/json ContentType.
type PostV1UsersUserNameJSONRequestBody PostV1UsersUserNameJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve audit records of organization.
	// (GET /v1/audit/organizations/{organization_name})
	GetV1AuditOrganizationsOrganizationName(c *gin.Context, organizationName OrganizationName, params GetV1AuditOrganizationsOrganizationNameParams)
	// Retrieve audit records of apiproduct.
	// (GET /v1/audit/organizations/{organization_name}/apiproducts/{apiproduct_name})
	GetV1AuditOrganizationsOrganizationNameApiproductsApiproductName(c *gin.Context, organizationName OrganizationName, apiproductName ApiproductName, params GetV1AuditOrganizationsOrganizationNameApiproductsApiproductNameParams)
	// Retrieve audit records of developer.
	// (GET /v1/audit/organizations/{organization_name}/developers/{developer_id})
	GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperId(c *gin.Context, organizationName OrganizationName, developerId DeveloperId, params GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdParams)
	// Retrieve audit records of application.
	// (GET /v1/audit/organizations/{organization_name}/developers/{developer_id}/apps/{app_id})
	GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppId(c *gin.Context, organizationName OrganizationName, developerId DeveloperId, appId AppId, params GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppIdParams)
	// Retrieve audit records of user
	// (GET /v1/audit/users/{user_name})
	GetV1AuditUsersUserName(c *gin.Context, userName UserName, params GetV1AuditUsersUserNameParams)
	// Retrieve clusters
	// (GET /v1/clusters)
	GetV1Clusters(c *gin.Context)
	// Create cluster
	// (POST /v1/clusters)
	PostV1Clusters(c *gin.Context)
	// Delete cluster
	// (DELETE /v1/clusters/{cluster_name})
	DeleteV1ClustersClusterName(c *gin.Context, clusterName ClusterName)
	// Retrieve cluster
	// (GET /v1/clusters/{cluster_name})
	GetV1ClustersClusterName(c *gin.Context, clusterName ClusterName)
	// Update cluster
	// (POST /v1/clusters/{cluster_name})
	PostV1ClustersClusterName(c *gin.Context, clusterName ClusterName)
	// Retrieve cluster attributes
	// (GET /v1/clusters/{cluster_name}/attributes)
	GetV1ClustersClusterNameAttributes(c *gin.Context, clusterName ClusterName)
	// Replace cluster attributes
	// (POST /v1/clusters/{cluster_name}/attributes)
	PostV1ClustersClusterNameAttributes(c *gin.Context, clusterName ClusterName)
	// Delete cluster attribute
	// (DELETE /v1/clusters/{cluster_name}/attributes/{attribute_name})
	DeleteV1ClustersClusterNameAttributesAttributeName(c *gin.Context, clusterName ClusterName, attributeName AttributeName)
	// Retrieve cluster attribute
	// (GET /v1/clusters/{cluster_name}/attributes/{attribute_name})
	GetV1ClustersClusterNameAttributesAttributeName(c *gin.Context, clusterName ClusterName, attributeName AttributeName)
	// Update cluster attribute
	// (POST /v1/clusters/{cluster_name}/attributes/{attribute_name})
	PostV1ClustersClusterNameAttributesAttributeName(c *gin.Context, clusterName ClusterName, attributeName AttributeName)
	// Retrieve listeners
	// (GET /v1/listeners)
	GetV1Listeners(c *gin.Context)
	// Create listener
	// (POST /v1/listeners)
	PostV1Listeners(c *gin.Context)
	// Delete listener
	// (DELETE /v1/listeners/{listener_name})
	DeleteV1ListenersListenerName(c *gin.Context, listenerName ListenerName)
	// Retrieve listener
	// (GET /v1/listeners/{listener_name})
	GetV1ListenersListenerName(c *gin.Context, listenerName ListenerName)
	// Update listener
	// (POST /v1/listeners/{listener_name})
	PostV1ListenersListenerName(c *gin.Context, listenerName ListenerName)
	// Retrieve listener attributes
	// (GET /v1/listeners/{listener_name}/attributes)
	GetV1ListenersListenerNameAttributes(c *gin.Context, listenerName ListenerName)
	// Replace listener attributes
	// (POST /v1/listeners/{listener_name}/attributes)
	PostV1ListenersListenerNameAttributes(c *gin.Context, listenerName ListenerName)
	// Delete listener attribute
	// (DELETE /v1/listeners/{listener_name}/attributes/{attribute_name})
	DeleteV1ListenersListenerNameAttributesAttributeName(c *gin.Context, listenerName ListenerName, attributeName AttributeName)
	// Retrieve listener attribute
	// (GET /v1/listeners/{listener_name}/attributes/{attribute_name})
	GetV1ListenersListenerNameAttributesAttributeName(c *gin.Context, listenerName ListenerName, attributeName AttributeName)
	// Update listener attribute
	// (POST /v1/listeners/{listener_name}/attributes/{attribute_name})
	PostV1ListenersListenerNameAttributesAttributeName(c *gin.Context, listenerName ListenerName, attributeName AttributeName)
	// Retrieve organizations
	// (GET /v1/organizations)
	GetV1Organizations(c *gin.Context)
	// Create organization
	// (POST /v1/organizations)
	PostV1Organizations(c *gin.Context)
	// Delete organization
	// (DELETE /v1/organizations/{organization_name})
	DeleteV1OrganizationsOrganizationName(c *gin.Context, organizationName OrganizationName)
	// Retrieve organization
	// (GET /v1/organizations/{organization_name})
	GetV1OrganizationsOrganizationName(c *gin.Context, organizationName OrganizationName)
	// Update organization
	// (POST /v1/organizations/{organization_name})
	PostV1OrganizationsOrganizationName(c *gin.Context, organizationName OrganizationName)
	// Retrieve APIProducts
	// (GET /v1/organizations/{organization_name}/apiproducts)
	GetV1OrganizationsOrganizationNameApiproducts(c *gin.Context, organizationName OrganizationName, params GetV1OrganizationsOrganizationNameApiproductsParams)
	// Create APIProduct
	// (POST /v1/organizations/{organization_name}/apiproducts)
	PostV1OrganizationsOrganizationNameApiproducts(c *gin.Context, organizationName OrganizationName)
	// Delete APIProduct
	// (DELETE /v1/organizations/{organization_name}/apiproducts/{apiproduct_name})
	DeleteV1OrganizationsOrganizationNameApiproductsApiproductName(c *gin.Context, organizationName OrganizationName, apiproductName ApiproductName)
	// Retrieve APIProduct
	// (GET /v1/organizations/{organization_name}/apiproducts/{apiproduct_name})
	GetV1OrganizationsOrganizationNameApiproductsApiproductName(c *gin.Context, organizationName OrganizationName, apiproductName ApiproductName)
	// Update APIProduct
	// (POST /v1/organizations/{organization_name}/apiproducts/{apiproduct_name})
	PostV1OrganizationsOrganizationNameApiproductsApiproductName(c *gin.Context, organizationName OrganizationName, apiproductName ApiproductName, params PostV1OrganizationsOrganizationNameApiproductsApiproductNameParams)
	// Retrieve APIProduct attributes
	// (GET /v1/organizations/{organization_name}/apiproducts/{apiproduct_name}/attributes)
	GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes(c *gin.Context, organizationName OrganizationName, apiproductName ApiproductName)
	// Replace APIProduct attributes
	// (POST /v1/organizations/{organization_name}/apiproducts/{apiproduct_name}/attributes)
	PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes(c *gin.Context, organizationName OrganizationName, apiproductName ApiproductName)
	// Delete APIProduct attribute
	// (DELETE /v1/organizations/{organization_name}/apiproducts/{apiproduct_name}/attributes/{attribute_name})
	DeleteV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName(c *gin.Context, organizationName OrganizationName, apiproductName ApiproductName, attributeName AttributeName)
	// Retrieve APIProduct attribute
	// (GET /v1/organizations/{organization_name}/apiproducts/{apiproduct_name}/attributes/{attribute_name})
	GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName(c *gin.Context, organizationName OrganizationName, apiproductName ApiproductName, attributeName AttributeName)
	// Update APIProduct attribute
	// (POST /v1/organizations/{organization_name}/apiproducts/{apiproduct_name}/attributes/{attribute_name})
	PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName(c *gin.Context, organizationName OrganizationName, apiproductName ApiproductName, attributeName AttributeName)
	// Retrieve applications
	// (GET /v1/organizations/{organization_name}/apps)
	GetV1OrganizationsOrganizationNameApps(c *gin.Context, organizationName OrganizationName, params GetV1OrganizationsOrganizationNameAppsParams)
	// Retrieve application
	// (GET /v1/organizations/{organization_name}/apps/{app_id})
	GetV1OrganizationsOrganizationNameAppsAppId(c *gin.Context, organizationName OrganizationName, appId AppId)
	// Retrieve companies
	// (GET /v1/organizations/{organization_name}/companies)
	GetV1OrganizationsOrganizationNameCompanies(c *gin.Context, organizationName OrganizationName, params GetV1OrganizationsOrganizationNameCompaniesParams)
	// Create company
	// (POST /v1/organizations/{organization_name}/companies)
	PostV1OrganizationsOrganizationNameCompanies(c *gin.Context, organizationName OrganizationName)
	// Delete company
	// (DELETE /v1/organizations/{organization_name}/companies/{company_name})
	DeleteV1OrganizationsOrganizationNameCompaniesCompanyName(c *gin.Context, organizationName OrganizationName, companyName CompanyName)
	// Retrieve company
	// (GET /v1/organizations/{organization_name}/companies/{company_name})
	GetV1OrganizationsOrganizationNameCompaniesCompanyName(c *gin.Context, organizationName OrganizationName, companyName CompanyName)
	// Update company
	// (POST /v1/organizations/{organization_name}/companies/{company_name})
	PostV1OrganizationsOrganizationNameCompaniesCompanyName(c *gin.Context, organizationName OrganizationName, companyName CompanyName, params PostV1OrganizationsOrganizationNameCompaniesCompanyNameParams)
	// Retrieve company attributes
	// (GET /v1/organizations/{organization_name}/companies/{company_name}/attributes)
	GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes(c *gin.Context, organizationName OrganizationName, companyName CompanyName)
	// Replace company attributes
	// (POST /v1/organizations/{organization_name}/companies/{company_name}/attributes)
	PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes(c *gin.Context, organizationName OrganizationName, companyName CompanyName)
	// Delete company attribute
	// (DELETE /v1/organizations/{organization_name}/companies/{company_name}/attributes/{attribute_name})
	DeleteV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName(c *gin.Context, organizationName OrganizationName, companyName CompanyName, attributeName AttributeName)
	// Retrieve company attribute
	// (GET /v1/organizations/{organization_name}/companies/{company_name}/attributes/{attribute_name})
	GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName(c *gin.Context, organizationName OrganizationName, companyName CompanyName, attributeName AttributeName)
	// Update company attribute
	// (POST /v1/organizations/{organization_name}/companies/{company_name}/attributes/{attribute_name})
	PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName(c *gin.Context, organizationName OrganizationName, companyName CompanyName, attributeName AttributeName)
	// Retrieve developers
	// (GET /v1/organizations/{organization_name}/developers)
	GetV1OrganizationsOrganizationNameDevelopers(c *gin.Context, organizationName OrganizationName, params GetV1OrganizationsOrganizationNameDevelopersParams)
	// Create developer
	// (POST /v1/organizations/{organization_name}/developers)
	PostV1OrganizationsOrganizationNameDevelopers(c *gin.Context, organizationName OrganizationName)
	// Delete developer
	// (DELETE /v1/organizations/{organization_name}/developers/{developer_emailaddress})
	DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress)
	// Retrieve developer
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress})
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress)
	// Update developer
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress})
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, params PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressParams)
	// Retrieve applications
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps)
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, params GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsParams)
	// Create application
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps)
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress)
	// Delete application
	// (DELETE /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name})
	DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName)
	// Retrieve application
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name})
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName)
	// Update application
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name})
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, params PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameParams)
	// Update application and keys
	// (PUT /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name})
	PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, params PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameParams)
	// Replace application attributes
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/attributes)
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName)
	// Replace application attributes
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/attributes)
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName)
	// Delete application attribute
	// (DELETE /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/attributes/{attribute_name})
	DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, attributeName AttributeName)
	// Retrieve application attribute
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/attributes/{attribute_name})
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, attributeName AttributeName)
	// Update application attribute
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/attributes/{attribute_name})
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, attributeName AttributeName)
	// Retrieve keys
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys)
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeys(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName)
	// Create key
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/create)
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreate(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName)
	// Delete key
	// (DELETE /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key})
	DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey)
	// Retrieve key
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key})
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey)
	// Update key
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key})
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey, params PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyParams)
	// Delete apiproduct remove key
	// (DELETE /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key}/apiproducts/{apiproduct_name})
	DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey, apiproductName ApiproductName)
	// Update key apiproduct
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key}/apiproducts/{apiproduct_name})
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey, apiproductName ApiproductName, params PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductNameParams)
	// Retrieve key attributes
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key}/attributes)
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey)
	// Replace key attributes
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key}/attributes)
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey)
	// Delete key attribute
	// (DELETE /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key}/attributes/{attribute_name})
	DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey, attributeName AttributeName)
	// Retrieve key attribute
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key}/attributes/{attribute_name})
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey, attributeName AttributeName)
	// Update key attribute
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/apps/{app_name}/keys/{consumer_key}/attributes/{attribute_name})
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, appName AppName, consumerKey ConsumerKey, attributeName AttributeName)
	// Retrieve developer attributes
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/attributes)
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress)
	// Replace developer attributes
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/attributes)
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress)
	// Delete developer attribute
	// (DELETE /v1/organizations/{organization_name}/developers/{developer_emailaddress}/attributes/{attribute_name})
	DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, attributeName AttributeName)
	// Retrieve developer attribute
	// (GET /v1/organizations/{organization_name}/developers/{developer_emailaddress}/attributes/{attribute_name})
	GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, attributeName AttributeName)
	// Update developer attribute
	// (POST /v1/organizations/{organization_name}/developers/{developer_emailaddress}/attributes/{attribute_name})
	PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName(c *gin.Context, organizationName OrganizationName, developerEmailaddress DeveloperEmailaddress, attributeName AttributeName)
	// Retrieve role
	// (GET /v1/roles)
	GetV1Roles(c *gin.Context)
	// Create role
	// (POST /v1/roles)
	PostV1Roles(c *gin.Context)
	// Delete role
	// (DELETE /v1/roles/{role_name})
	DeleteV1RolesRoleName(c *gin.Context, roleName RoleName)
	// Retrieve role
	// (GET /v1/roles/{role_name})
	GetV1RolesRoleName(c *gin.Context, roleName RoleName)
	// Update role
	// (POST /v1/roles/{role_name})
	PostV1RolesRoleName(c *gin.Context, roleName RoleName)
	// Retrieve users assigned to role
	// (GET /v1/roles/{role_name}/users)
	GetV1RolesRoleNameUsers(c *gin.Context, roleName RoleName)
	// Retrieve route
	// (GET /v1/routes)
	GetV1Routes(c *gin.Context)
	// Create route
	// (POST /v1/routes)
	PostV1Routes(c *gin.Context)
	// Delete route
	// (DELETE /v1/routes/{route_name})
	DeleteV1RoutesRouteName(c *gin.Context, routeName RouteName)
	// Retrieve route
	// (GET /v1/routes/{route_name})
	GetV1RoutesRouteName(c *gin.Context, routeName RouteName)
	// Update route
	// (POST /v1/routes/{route_name})
	PostV1RoutesRouteName(c *gin.Context, routeName RouteName)
	// Retrieve route attributes
	// (GET /v1/routes/{route_name}/attributes)
	GetV1RoutesRouteNameAttributes(c *gin.Context, routeName RouteName)
	// Replace route attributes
	// (POST /v1/routes/{route_name}/attributes)
	PostV1RoutesRouteNameAttributes(c *gin.Context, routeName RouteName)
	// Delete route attribute
	// (DELETE /v1/routes/{route_name}/attributes/{attribute_name})
	DeleteV1RoutesRouteNameAttributesAttributeName(c *gin.Context, routeName RouteName, attributeName AttributeName)
	// Retrieve route attribute
	// (GET /v1/routes/{route_name}/attributes/{attribute_name})
	GetV1RoutesRouteNameAttributesAttributeName(c *gin.Context, routeName RouteName, attributeName AttributeName)
	// Update route attribute
	// (POST /v1/routes/{route_name}/attributes/{attribute_name})
	PostV1RoutesRouteNameAttributesAttributeName(c *gin.Context, routeName RouteName, attributeName AttributeName)
	// Retrieve user
	// (GET /v1/users)
	GetV1Users(c *gin.Context)
	// Create user
	// (POST /v1/users)
	PostV1Users(c *gin.Context)
	// Delete user
	// (DELETE /v1/users/{user_name})
	DeleteV1UsersUserName(c *gin.Context, userName UserName)
	// Retrieve user
	// (GET /v1/users/{user_name})
	GetV1UsersUserName(c *gin.Context, userName UserName)
	// Update user
	// (POST /v1/users/{user_name})
	PostV1UsersUserName(c *gin.Context, userName UserName)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetV1AuditOrganizationsOrganizationName operation middleware
func (siw *ServerInterfaceWrapper) GetV1AuditOrganizationsOrganizationName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AuditOrganizationsOrganizationNameParams

	// ------------- Optional query parameter "startTime" -------------
	if paramValue := c.Query("startTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter startTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "endTime" -------------
	if paramValue := c.Query("endTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter endTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "count" -------------
	if paramValue := c.Query("count"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter count: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1AuditOrganizationsOrganizationName(c, organizationName, params)
}

// GetV1AuditOrganizationsOrganizationNameApiproductsApiproductName operation middleware
func (siw *ServerInterfaceWrapper) GetV1AuditOrganizationsOrganizationNameApiproductsApiproductName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AuditOrganizationsOrganizationNameApiproductsApiproductNameParams

	// ------------- Optional query parameter "startTime" -------------
	if paramValue := c.Query("startTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter startTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "endTime" -------------
	if paramValue := c.Query("endTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter endTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "count" -------------
	if paramValue := c.Query("count"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter count: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1AuditOrganizationsOrganizationNameApiproductsApiproductName(c, organizationName, apiproductName, params)
}

// GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperId operation middleware
func (siw *ServerInterfaceWrapper) GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperId(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_id" -------------
	var developerId DeveloperId

	err = runtime.BindStyledParameter("simple", false, "developer_id", c.Param("developer_id"), &developerId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_id: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdParams

	// ------------- Optional query parameter "startTime" -------------
	if paramValue := c.Query("startTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter startTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "endTime" -------------
	if paramValue := c.Query("endTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter endTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "count" -------------
	if paramValue := c.Query("count"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter count: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperId(c, organizationName, developerId, params)
}

// GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppId operation middleware
func (siw *ServerInterfaceWrapper) GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppId(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_id" -------------
	var developerId DeveloperId

	err = runtime.BindStyledParameter("simple", false, "developer_id", c.Param("developer_id"), &developerId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_id: %s", err)})
		return
	}

	// ------------- Path parameter "app_id" -------------
	var appId AppId

	err = runtime.BindStyledParameter("simple", false, "app_id", c.Param("app_id"), &appId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_id: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppIdParams

	// ------------- Optional query parameter "startTime" -------------
	if paramValue := c.Query("startTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter startTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "endTime" -------------
	if paramValue := c.Query("endTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter endTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "count" -------------
	if paramValue := c.Query("count"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter count: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppId(c, organizationName, developerId, appId, params)
}

// GetV1AuditUsersUserName operation middleware
func (siw *ServerInterfaceWrapper) GetV1AuditUsersUserName(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_name" -------------
	var userName UserName

	err = runtime.BindStyledParameter("simple", false, "user_name", c.Param("user_name"), &userName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AuditUsersUserNameParams

	// ------------- Optional query parameter "startTime" -------------
	if paramValue := c.Query("startTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter startTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "endTime" -------------
	if paramValue := c.Query("endTime"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter endTime: %s", err)})
		return
	}

	// ------------- Optional query parameter "count" -------------
	if paramValue := c.Query("count"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter count: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1AuditUsersUserName(c, userName, params)
}

// GetV1Clusters operation middleware
func (siw *ServerInterfaceWrapper) GetV1Clusters(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1Clusters(c)
}

// PostV1Clusters operation middleware
func (siw *ServerInterfaceWrapper) PostV1Clusters(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1Clusters(c)
}

// DeleteV1ClustersClusterName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1ClustersClusterName(c *gin.Context) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName ClusterName

	err = runtime.BindStyledParameter("simple", false, "cluster_name", c.Param("cluster_name"), &clusterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cluster_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1ClustersClusterName(c, clusterName)
}

// GetV1ClustersClusterName operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClustersClusterName(c *gin.Context) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName ClusterName

	err = runtime.BindStyledParameter("simple", false, "cluster_name", c.Param("cluster_name"), &clusterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cluster_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1ClustersClusterName(c, clusterName)
}

// PostV1ClustersClusterName operation middleware
func (siw *ServerInterfaceWrapper) PostV1ClustersClusterName(c *gin.Context) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName ClusterName

	err = runtime.BindStyledParameter("simple", false, "cluster_name", c.Param("cluster_name"), &clusterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cluster_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1ClustersClusterName(c, clusterName)
}

// GetV1ClustersClusterNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClustersClusterNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName ClusterName

	err = runtime.BindStyledParameter("simple", false, "cluster_name", c.Param("cluster_name"), &clusterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cluster_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1ClustersClusterNameAttributes(c, clusterName)
}

// PostV1ClustersClusterNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) PostV1ClustersClusterNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName ClusterName

	err = runtime.BindStyledParameter("simple", false, "cluster_name", c.Param("cluster_name"), &clusterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cluster_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1ClustersClusterNameAttributes(c, clusterName)
}

// DeleteV1ClustersClusterNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1ClustersClusterNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName ClusterName

	err = runtime.BindStyledParameter("simple", false, "cluster_name", c.Param("cluster_name"), &clusterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cluster_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1ClustersClusterNameAttributesAttributeName(c, clusterName, attributeName)
}

// GetV1ClustersClusterNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClustersClusterNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName ClusterName

	err = runtime.BindStyledParameter("simple", false, "cluster_name", c.Param("cluster_name"), &clusterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cluster_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1ClustersClusterNameAttributesAttributeName(c, clusterName, attributeName)
}

// PostV1ClustersClusterNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) PostV1ClustersClusterNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "cluster_name" -------------
	var clusterName ClusterName

	err = runtime.BindStyledParameter("simple", false, "cluster_name", c.Param("cluster_name"), &clusterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cluster_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1ClustersClusterNameAttributesAttributeName(c, clusterName, attributeName)
}

// GetV1Listeners operation middleware
func (siw *ServerInterfaceWrapper) GetV1Listeners(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1Listeners(c)
}

// PostV1Listeners operation middleware
func (siw *ServerInterfaceWrapper) PostV1Listeners(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1Listeners(c)
}

// DeleteV1ListenersListenerName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1ListenersListenerName(c *gin.Context) {

	var err error

	// ------------- Path parameter "listener_name" -------------
	var listenerName ListenerName

	err = runtime.BindStyledParameter("simple", false, "listener_name", c.Param("listener_name"), &listenerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter listener_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1ListenersListenerName(c, listenerName)
}

// GetV1ListenersListenerName operation middleware
func (siw *ServerInterfaceWrapper) GetV1ListenersListenerName(c *gin.Context) {

	var err error

	// ------------- Path parameter "listener_name" -------------
	var listenerName ListenerName

	err = runtime.BindStyledParameter("simple", false, "listener_name", c.Param("listener_name"), &listenerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter listener_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1ListenersListenerName(c, listenerName)
}

// PostV1ListenersListenerName operation middleware
func (siw *ServerInterfaceWrapper) PostV1ListenersListenerName(c *gin.Context) {

	var err error

	// ------------- Path parameter "listener_name" -------------
	var listenerName ListenerName

	err = runtime.BindStyledParameter("simple", false, "listener_name", c.Param("listener_name"), &listenerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter listener_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1ListenersListenerName(c, listenerName)
}

// GetV1ListenersListenerNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetV1ListenersListenerNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "listener_name" -------------
	var listenerName ListenerName

	err = runtime.BindStyledParameter("simple", false, "listener_name", c.Param("listener_name"), &listenerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter listener_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1ListenersListenerNameAttributes(c, listenerName)
}

// PostV1ListenersListenerNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) PostV1ListenersListenerNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "listener_name" -------------
	var listenerName ListenerName

	err = runtime.BindStyledParameter("simple", false, "listener_name", c.Param("listener_name"), &listenerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter listener_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1ListenersListenerNameAttributes(c, listenerName)
}

// DeleteV1ListenersListenerNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1ListenersListenerNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "listener_name" -------------
	var listenerName ListenerName

	err = runtime.BindStyledParameter("simple", false, "listener_name", c.Param("listener_name"), &listenerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter listener_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1ListenersListenerNameAttributesAttributeName(c, listenerName, attributeName)
}

// GetV1ListenersListenerNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) GetV1ListenersListenerNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "listener_name" -------------
	var listenerName ListenerName

	err = runtime.BindStyledParameter("simple", false, "listener_name", c.Param("listener_name"), &listenerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter listener_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1ListenersListenerNameAttributesAttributeName(c, listenerName, attributeName)
}

// PostV1ListenersListenerNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) PostV1ListenersListenerNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "listener_name" -------------
	var listenerName ListenerName

	err = runtime.BindStyledParameter("simple", false, "listener_name", c.Param("listener_name"), &listenerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter listener_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1ListenersListenerNameAttributesAttributeName(c, listenerName, attributeName)
}

// GetV1Organizations operation middleware
func (siw *ServerInterfaceWrapper) GetV1Organizations(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1Organizations(c)
}

// PostV1Organizations operation middleware
func (siw *ServerInterfaceWrapper) PostV1Organizations(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1Organizations(c)
}

// DeleteV1OrganizationsOrganizationName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationName(c, organizationName)
}

// GetV1OrganizationsOrganizationName operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationName(c, organizationName)
}

// PostV1OrganizationsOrganizationName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationName(c, organizationName)
}

// GetV1OrganizationsOrganizationNameApiproducts operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameApiproducts(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1OrganizationsOrganizationNameApiproductsParams

	// ------------- Optional query parameter "expand" -------------
	if paramValue := c.Query("expand"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "expand", c.Request.URL.Query(), &params.Expand)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter expand: %s", err)})
		return
	}

	// ------------- Optional query parameter "count" -------------
	if paramValue := c.Query("count"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter count: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameApiproducts(c, organizationName, params)
}

// PostV1OrganizationsOrganizationNameApiproducts operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameApiproducts(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameApiproducts(c, organizationName)
}

// DeleteV1OrganizationsOrganizationNameApiproductsApiproductName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameApiproductsApiproductName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameApiproductsApiproductName(c, organizationName, apiproductName)
}

// GetV1OrganizationsOrganizationNameApiproductsApiproductName operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameApiproductsApiproductName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameApiproductsApiproductName(c, organizationName, apiproductName)
}

// PostV1OrganizationsOrganizationNameApiproductsApiproductName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameApiproductsApiproductName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1OrganizationsOrganizationNameApiproductsApiproductNameParams

	// ------------- Optional query parameter "action" -------------
	if paramValue := c.Query("action"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter action: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameApiproductsApiproductName(c, organizationName, apiproductName, params)
}

// GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes(c, organizationName, apiproductName)
}

// PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes(c, organizationName, apiproductName)
}

// DeleteV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName(c, organizationName, apiproductName, attributeName)
}

// GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName(c, organizationName, apiproductName, attributeName)
}

// PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName(c, organizationName, apiproductName, attributeName)
}

// GetV1OrganizationsOrganizationNameApps operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameApps(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1OrganizationsOrganizationNameAppsParams

	// ------------- Optional query parameter "expand" -------------
	if paramValue := c.Query("expand"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "expand", c.Request.URL.Query(), &params.Expand)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter expand: %s", err)})
		return
	}

	// ------------- Optional query parameter "rows" -------------
	if paramValue := c.Query("rows"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rows", c.Request.URL.Query(), &params.Rows)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter rows: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameApps(c, organizationName, params)
}

// GetV1OrganizationsOrganizationNameAppsAppId operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameAppsAppId(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "app_id" -------------
	var appId AppId

	err = runtime.BindStyledParameter("simple", false, "app_id", c.Param("app_id"), &appId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_id: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameAppsAppId(c, organizationName, appId)
}

// GetV1OrganizationsOrganizationNameCompanies operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameCompanies(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1OrganizationsOrganizationNameCompaniesParams

	// ------------- Optional query parameter "expand" -------------
	if paramValue := c.Query("expand"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "expand", c.Request.URL.Query(), &params.Expand)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter expand: %s", err)})
		return
	}

	// ------------- Optional query parameter "count" -------------
	if paramValue := c.Query("count"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter count: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameCompanies(c, organizationName, params)
}

// PostV1OrganizationsOrganizationNameCompanies operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameCompanies(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameCompanies(c, organizationName)
}

// DeleteV1OrganizationsOrganizationNameCompaniesCompanyName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameCompaniesCompanyName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "company_name" -------------
	var companyName CompanyName

	err = runtime.BindStyledParameter("simple", false, "company_name", c.Param("company_name"), &companyName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter company_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameCompaniesCompanyName(c, organizationName, companyName)
}

// GetV1OrganizationsOrganizationNameCompaniesCompanyName operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameCompaniesCompanyName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "company_name" -------------
	var companyName CompanyName

	err = runtime.BindStyledParameter("simple", false, "company_name", c.Param("company_name"), &companyName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter company_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameCompaniesCompanyName(c, organizationName, companyName)
}

// PostV1OrganizationsOrganizationNameCompaniesCompanyName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameCompaniesCompanyName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "company_name" -------------
	var companyName CompanyName

	err = runtime.BindStyledParameter("simple", false, "company_name", c.Param("company_name"), &companyName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter company_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1OrganizationsOrganizationNameCompaniesCompanyNameParams

	// ------------- Optional query parameter "action" -------------
	if paramValue := c.Query("action"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter action: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameCompaniesCompanyName(c, organizationName, companyName, params)
}

// GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "company_name" -------------
	var companyName CompanyName

	err = runtime.BindStyledParameter("simple", false, "company_name", c.Param("company_name"), &companyName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter company_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes(c, organizationName, companyName)
}

// PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "company_name" -------------
	var companyName CompanyName

	err = runtime.BindStyledParameter("simple", false, "company_name", c.Param("company_name"), &companyName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter company_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes(c, organizationName, companyName)
}

// DeleteV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "company_name" -------------
	var companyName CompanyName

	err = runtime.BindStyledParameter("simple", false, "company_name", c.Param("company_name"), &companyName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter company_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName(c, organizationName, companyName, attributeName)
}

// GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "company_name" -------------
	var companyName CompanyName

	err = runtime.BindStyledParameter("simple", false, "company_name", c.Param("company_name"), &companyName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter company_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName(c, organizationName, companyName, attributeName)
}

// PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "company_name" -------------
	var companyName CompanyName

	err = runtime.BindStyledParameter("simple", false, "company_name", c.Param("company_name"), &companyName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter company_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName(c, organizationName, companyName, attributeName)
}

// GetV1OrganizationsOrganizationNameDevelopers operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopers(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1OrganizationsOrganizationNameDevelopersParams

	// ------------- Optional query parameter "expand" -------------
	if paramValue := c.Query("expand"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "expand", c.Request.URL.Query(), &params.Expand)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter expand: %s", err)})
		return
	}

	// ------------- Optional query parameter "count" -------------
	if paramValue := c.Query("count"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter count: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopers(c, organizationName, params)
}

// PostV1OrganizationsOrganizationNameDevelopers operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopers(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopers(c, organizationName)
}

// DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress(c, organizationName, developerEmailaddress)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress(c, organizationName, developerEmailaddress)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressParams

	// ------------- Optional query parameter "action" -------------
	if paramValue := c.Query("action"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter action: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress(c, organizationName, developerEmailaddress, params)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsParams

	// ------------- Optional query parameter "expand" -------------
	if paramValue := c.Query("expand"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "expand", c.Request.URL.Query(), &params.Expand)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter expand: %s", err)})
		return
	}

	// ------------- Optional query parameter "count" -------------
	if paramValue := c.Query("count"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter count: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps(c, organizationName, developerEmailaddress, params)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps(c, organizationName, developerEmailaddress)
}

// DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c, organizationName, developerEmailaddress, appName)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c, organizationName, developerEmailaddress, appName)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameParams

	// ------------- Optional query parameter "action" -------------
	if paramValue := c.Query("action"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter action: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c, organizationName, developerEmailaddress, appName, params)
}

// PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName operation middleware
func (siw *ServerInterfaceWrapper) PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameParams

	// ------------- Optional query parameter "action" -------------
	if paramValue := c.Query("action"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter action: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName(c, organizationName, developerEmailaddress, appName, params)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes(c, organizationName, developerEmailaddress, appName)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes(c, organizationName, developerEmailaddress, appName)
}

// DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName(c, organizationName, developerEmailaddress, appName, attributeName)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName(c, organizationName, developerEmailaddress, appName, attributeName)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName(c, organizationName, developerEmailaddress, appName, attributeName)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeys operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeys(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeys(c, organizationName, developerEmailaddress, appName)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreate operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreate(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreate(c, organizationName, developerEmailaddress, appName)
}

// DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey(c, organizationName, developerEmailaddress, appName, consumerKey)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey(c, organizationName, developerEmailaddress, appName, consumerKey)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyParams

	// ------------- Optional query parameter "action" -------------
	if paramValue := c.Query("action"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter action: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey(c, organizationName, developerEmailaddress, appName, consumerKey, params)
}

// DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName(c, organizationName, developerEmailaddress, appName, consumerKey, apiproductName)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	// ------------- Path parameter "apiproduct_name" -------------
	var apiproductName ApiproductName

	err = runtime.BindStyledParameter("simple", false, "apiproduct_name", c.Param("apiproduct_name"), &apiproductName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter apiproduct_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductNameParams

	// ------------- Optional query parameter "action" -------------
	if paramValue := c.Query("action"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter action: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName(c, organizationName, developerEmailaddress, appName, consumerKey, apiproductName, params)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes(c, organizationName, developerEmailaddress, appName, consumerKey)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes(c, organizationName, developerEmailaddress, appName, consumerKey)
}

// DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName(c, organizationName, developerEmailaddress, appName, consumerKey, attributeName)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName(c, organizationName, developerEmailaddress, appName, consumerKey, attributeName)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "app_name" -------------
	var appName AppName

	err = runtime.BindStyledParameter("simple", false, "app_name", c.Param("app_name"), &appName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter app_name: %s", err)})
		return
	}

	// ------------- Path parameter "consumer_key" -------------
	var consumerKey ConsumerKey

	err = runtime.BindStyledParameter("simple", false, "consumer_key", c.Param("consumer_key"), &consumerKey)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter consumer_key: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName(c, organizationName, developerEmailaddress, appName, consumerKey, attributeName)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes(c, organizationName, developerEmailaddress)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes(c, organizationName, developerEmailaddress)
}

// DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName(c, organizationName, developerEmailaddress, attributeName)
}

// GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName(c, organizationName, developerEmailaddress, attributeName)
}

// PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName OrganizationName

	err = runtime.BindStyledParameter("simple", false, "organization_name", c.Param("organization_name"), &organizationName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter organization_name: %s", err)})
		return
	}

	// ------------- Path parameter "developer_emailaddress" -------------
	var developerEmailaddress DeveloperEmailaddress

	err = runtime.BindStyledParameter("simple", false, "developer_emailaddress", c.Param("developer_emailaddress"), &developerEmailaddress)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter developer_emailaddress: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName(c, organizationName, developerEmailaddress, attributeName)
}

// GetV1Roles operation middleware
func (siw *ServerInterfaceWrapper) GetV1Roles(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1Roles(c)
}

// PostV1Roles operation middleware
func (siw *ServerInterfaceWrapper) PostV1Roles(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1Roles(c)
}

// DeleteV1RolesRoleName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1RolesRoleName(c *gin.Context) {

	var err error

	// ------------- Path parameter "role_name" -------------
	var roleName RoleName

	err = runtime.BindStyledParameter("simple", false, "role_name", c.Param("role_name"), &roleName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter role_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1RolesRoleName(c, roleName)
}

// GetV1RolesRoleName operation middleware
func (siw *ServerInterfaceWrapper) GetV1RolesRoleName(c *gin.Context) {

	var err error

	// ------------- Path parameter "role_name" -------------
	var roleName RoleName

	err = runtime.BindStyledParameter("simple", false, "role_name", c.Param("role_name"), &roleName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter role_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1RolesRoleName(c, roleName)
}

// PostV1RolesRoleName operation middleware
func (siw *ServerInterfaceWrapper) PostV1RolesRoleName(c *gin.Context) {

	var err error

	// ------------- Path parameter "role_name" -------------
	var roleName RoleName

	err = runtime.BindStyledParameter("simple", false, "role_name", c.Param("role_name"), &roleName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter role_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1RolesRoleName(c, roleName)
}

// GetV1RolesRoleNameUsers operation middleware
func (siw *ServerInterfaceWrapper) GetV1RolesRoleNameUsers(c *gin.Context) {

	var err error

	// ------------- Path parameter "role_name" -------------
	var roleName RoleName

	err = runtime.BindStyledParameter("simple", false, "role_name", c.Param("role_name"), &roleName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter role_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1RolesRoleNameUsers(c, roleName)
}

// GetV1Routes operation middleware
func (siw *ServerInterfaceWrapper) GetV1Routes(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1Routes(c)
}

// PostV1Routes operation middleware
func (siw *ServerInterfaceWrapper) PostV1Routes(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1Routes(c)
}

// DeleteV1RoutesRouteName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1RoutesRouteName(c *gin.Context) {

	var err error

	// ------------- Path parameter "route_name" -------------
	var routeName RouteName

	err = runtime.BindStyledParameter("simple", false, "route_name", c.Param("route_name"), &routeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter route_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1RoutesRouteName(c, routeName)
}

// GetV1RoutesRouteName operation middleware
func (siw *ServerInterfaceWrapper) GetV1RoutesRouteName(c *gin.Context) {

	var err error

	// ------------- Path parameter "route_name" -------------
	var routeName RouteName

	err = runtime.BindStyledParameter("simple", false, "route_name", c.Param("route_name"), &routeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter route_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1RoutesRouteName(c, routeName)
}

// PostV1RoutesRouteName operation middleware
func (siw *ServerInterfaceWrapper) PostV1RoutesRouteName(c *gin.Context) {

	var err error

	// ------------- Path parameter "route_name" -------------
	var routeName RouteName

	err = runtime.BindStyledParameter("simple", false, "route_name", c.Param("route_name"), &routeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter route_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1RoutesRouteName(c, routeName)
}

// GetV1RoutesRouteNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetV1RoutesRouteNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "route_name" -------------
	var routeName RouteName

	err = runtime.BindStyledParameter("simple", false, "route_name", c.Param("route_name"), &routeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter route_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1RoutesRouteNameAttributes(c, routeName)
}

// PostV1RoutesRouteNameAttributes operation middleware
func (siw *ServerInterfaceWrapper) PostV1RoutesRouteNameAttributes(c *gin.Context) {

	var err error

	// ------------- Path parameter "route_name" -------------
	var routeName RouteName

	err = runtime.BindStyledParameter("simple", false, "route_name", c.Param("route_name"), &routeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter route_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1RoutesRouteNameAttributes(c, routeName)
}

// DeleteV1RoutesRouteNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1RoutesRouteNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "route_name" -------------
	var routeName RouteName

	err = runtime.BindStyledParameter("simple", false, "route_name", c.Param("route_name"), &routeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter route_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1RoutesRouteNameAttributesAttributeName(c, routeName, attributeName)
}

// GetV1RoutesRouteNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) GetV1RoutesRouteNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "route_name" -------------
	var routeName RouteName

	err = runtime.BindStyledParameter("simple", false, "route_name", c.Param("route_name"), &routeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter route_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1RoutesRouteNameAttributesAttributeName(c, routeName, attributeName)
}

// PostV1RoutesRouteNameAttributesAttributeName operation middleware
func (siw *ServerInterfaceWrapper) PostV1RoutesRouteNameAttributesAttributeName(c *gin.Context) {

	var err error

	// ------------- Path parameter "route_name" -------------
	var routeName RouteName

	err = runtime.BindStyledParameter("simple", false, "route_name", c.Param("route_name"), &routeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter route_name: %s", err)})
		return
	}

	// ------------- Path parameter "attribute_name" -------------
	var attributeName AttributeName

	err = runtime.BindStyledParameter("simple", false, "attribute_name", c.Param("attribute_name"), &attributeName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter attribute_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1RoutesRouteNameAttributesAttributeName(c, routeName, attributeName)
}

// GetV1Users operation middleware
func (siw *ServerInterfaceWrapper) GetV1Users(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1Users(c)
}

// PostV1Users operation middleware
func (siw *ServerInterfaceWrapper) PostV1Users(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1Users(c)
}

// DeleteV1UsersUserName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1UsersUserName(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_name" -------------
	var userName UserName

	err = runtime.BindStyledParameter("simple", false, "user_name", c.Param("user_name"), &userName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteV1UsersUserName(c, userName)
}

// GetV1UsersUserName operation middleware
func (siw *ServerInterfaceWrapper) GetV1UsersUserName(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_name" -------------
	var userName UserName

	err = runtime.BindStyledParameter("simple", false, "user_name", c.Param("user_name"), &userName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetV1UsersUserName(c, userName)
}

// PostV1UsersUserName operation middleware
func (siw *ServerInterfaceWrapper) PostV1UsersUserName(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_name" -------------
	var userName UserName

	err = runtime.BindStyledParameter("simple", false, "user_name", c.Param("user_name"), &userName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_name: %s", err)})
		return
	}

	c.Set(BasicAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostV1UsersUserName(c, userName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/v1/audit/organizations/:organization_name", wrapper.GetV1AuditOrganizationsOrganizationName)

	router.GET(options.BaseURL+"/v1/audit/organizations/:organization_name/apiproducts/:apiproduct_name", wrapper.GetV1AuditOrganizationsOrganizationNameApiproductsApiproductName)

	router.GET(options.BaseURL+"/v1/audit/organizations/:organization_name/developers/:developer_id", wrapper.GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperId)

	router.GET(options.BaseURL+"/v1/audit/organizations/:organization_name/developers/:developer_id/apps/:app_id", wrapper.GetV1AuditOrganizationsOrganizationNameDevelopersDeveloperIdAppsAppId)

	router.GET(options.BaseURL+"/v1/audit/users/:user_name", wrapper.GetV1AuditUsersUserName)

	router.GET(options.BaseURL+"/v1/clusters", wrapper.GetV1Clusters)

	router.POST(options.BaseURL+"/v1/clusters", wrapper.PostV1Clusters)

	router.DELETE(options.BaseURL+"/v1/clusters/:cluster_name", wrapper.DeleteV1ClustersClusterName)

	router.GET(options.BaseURL+"/v1/clusters/:cluster_name", wrapper.GetV1ClustersClusterName)

	router.POST(options.BaseURL+"/v1/clusters/:cluster_name", wrapper.PostV1ClustersClusterName)

	router.GET(options.BaseURL+"/v1/clusters/:cluster_name/attributes", wrapper.GetV1ClustersClusterNameAttributes)

	router.POST(options.BaseURL+"/v1/clusters/:cluster_name/attributes", wrapper.PostV1ClustersClusterNameAttributes)

	router.DELETE(options.BaseURL+"/v1/clusters/:cluster_name/attributes/:attribute_name", wrapper.DeleteV1ClustersClusterNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/clusters/:cluster_name/attributes/:attribute_name", wrapper.GetV1ClustersClusterNameAttributesAttributeName)

	router.POST(options.BaseURL+"/v1/clusters/:cluster_name/attributes/:attribute_name", wrapper.PostV1ClustersClusterNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/listeners", wrapper.GetV1Listeners)

	router.POST(options.BaseURL+"/v1/listeners", wrapper.PostV1Listeners)

	router.DELETE(options.BaseURL+"/v1/listeners/:listener_name", wrapper.DeleteV1ListenersListenerName)

	router.GET(options.BaseURL+"/v1/listeners/:listener_name", wrapper.GetV1ListenersListenerName)

	router.POST(options.BaseURL+"/v1/listeners/:listener_name", wrapper.PostV1ListenersListenerName)

	router.GET(options.BaseURL+"/v1/listeners/:listener_name/attributes", wrapper.GetV1ListenersListenerNameAttributes)

	router.POST(options.BaseURL+"/v1/listeners/:listener_name/attributes", wrapper.PostV1ListenersListenerNameAttributes)

	router.DELETE(options.BaseURL+"/v1/listeners/:listener_name/attributes/:attribute_name", wrapper.DeleteV1ListenersListenerNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/listeners/:listener_name/attributes/:attribute_name", wrapper.GetV1ListenersListenerNameAttributesAttributeName)

	router.POST(options.BaseURL+"/v1/listeners/:listener_name/attributes/:attribute_name", wrapper.PostV1ListenersListenerNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations", wrapper.GetV1Organizations)

	router.POST(options.BaseURL+"/v1/organizations", wrapper.PostV1Organizations)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name", wrapper.DeleteV1OrganizationsOrganizationName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name", wrapper.GetV1OrganizationsOrganizationName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name", wrapper.PostV1OrganizationsOrganizationName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/apiproducts", wrapper.GetV1OrganizationsOrganizationNameApiproducts)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/apiproducts", wrapper.PostV1OrganizationsOrganizationNameApiproducts)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/apiproducts/:apiproduct_name", wrapper.DeleteV1OrganizationsOrganizationNameApiproductsApiproductName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/apiproducts/:apiproduct_name", wrapper.GetV1OrganizationsOrganizationNameApiproductsApiproductName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/apiproducts/:apiproduct_name", wrapper.PostV1OrganizationsOrganizationNameApiproductsApiproductName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/apiproducts/:apiproduct_name/attributes", wrapper.GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/apiproducts/:apiproduct_name/attributes", wrapper.PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributes)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/apiproducts/:apiproduct_name/attributes/:attribute_name", wrapper.DeleteV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/apiproducts/:apiproduct_name/attributes/:attribute_name", wrapper.GetV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/apiproducts/:apiproduct_name/attributes/:attribute_name", wrapper.PostV1OrganizationsOrganizationNameApiproductsApiproductNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/apps", wrapper.GetV1OrganizationsOrganizationNameApps)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/apps/:app_id", wrapper.GetV1OrganizationsOrganizationNameAppsAppId)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/companies", wrapper.GetV1OrganizationsOrganizationNameCompanies)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/companies", wrapper.PostV1OrganizationsOrganizationNameCompanies)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/companies/:company_name", wrapper.DeleteV1OrganizationsOrganizationNameCompaniesCompanyName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/companies/:company_name", wrapper.GetV1OrganizationsOrganizationNameCompaniesCompanyName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/companies/:company_name", wrapper.PostV1OrganizationsOrganizationNameCompaniesCompanyName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/companies/:company_name/attributes", wrapper.GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/companies/:company_name/attributes", wrapper.PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributes)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/companies/:company_name/attributes/:attribute_name", wrapper.DeleteV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/companies/:company_name/attributes/:attribute_name", wrapper.GetV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/companies/:company_name/attributes/:attribute_name", wrapper.PostV1OrganizationsOrganizationNameCompaniesCompanyNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers", wrapper.GetV1OrganizationsOrganizationNameDevelopers)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers", wrapper.PostV1OrganizationsOrganizationNameDevelopers)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress", wrapper.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddress)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressApps)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name", wrapper.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName)

	router.PUT(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name", wrapper.PutV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/attributes", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/attributes", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributes)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/attributes/:attribute_name", wrapper.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/attributes/:attribute_name", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/attributes/:attribute_name", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeys)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/create", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysCreate)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key", wrapper.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKey)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key/apiproducts/:apiproduct_name", wrapper.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key/apiproducts/:apiproduct_name", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyApiproductsApiproductName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key/attributes", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key/attributes", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributes)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key/attributes/:attribute_name", wrapper.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key/attributes/:attribute_name", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/apps/:app_name/keys/:consumer_key/attributes/:attribute_name", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAppsAppNameKeysConsumerKeyAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/attributes", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/attributes", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributes)

	router.DELETE(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/attributes/:attribute_name", wrapper.DeleteV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/attributes/:attribute_name", wrapper.GetV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName)

	router.POST(options.BaseURL+"/v1/organizations/:organization_name/developers/:developer_emailaddress/attributes/:attribute_name", wrapper.PostV1OrganizationsOrganizationNameDevelopersDeveloperEmailaddressAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/roles", wrapper.GetV1Roles)

	router.POST(options.BaseURL+"/v1/roles", wrapper.PostV1Roles)

	router.DELETE(options.BaseURL+"/v1/roles/:role_name", wrapper.DeleteV1RolesRoleName)

	router.GET(options.BaseURL+"/v1/roles/:role_name", wrapper.GetV1RolesRoleName)

	router.POST(options.BaseURL+"/v1/roles/:role_name", wrapper.PostV1RolesRoleName)

	router.GET(options.BaseURL+"/v1/roles/:role_name/users", wrapper.GetV1RolesRoleNameUsers)

	router.GET(options.BaseURL+"/v1/routes", wrapper.GetV1Routes)

	router.POST(options.BaseURL+"/v1/routes", wrapper.PostV1Routes)

	router.DELETE(options.BaseURL+"/v1/routes/:route_name", wrapper.DeleteV1RoutesRouteName)

	router.GET(options.BaseURL+"/v1/routes/:route_name", wrapper.GetV1RoutesRouteName)

	router.POST(options.BaseURL+"/v1/routes/:route_name", wrapper.PostV1RoutesRouteName)

	router.GET(options.BaseURL+"/v1/routes/:route_name/attributes", wrapper.GetV1RoutesRouteNameAttributes)

	router.POST(options.BaseURL+"/v1/routes/:route_name/attributes", wrapper.PostV1RoutesRouteNameAttributes)

	router.DELETE(options.BaseURL+"/v1/routes/:route_name/attributes/:attribute_name", wrapper.DeleteV1RoutesRouteNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/routes/:route_name/attributes/:attribute_name", wrapper.GetV1RoutesRouteNameAttributesAttributeName)

	router.POST(options.BaseURL+"/v1/routes/:route_name/attributes/:attribute_name", wrapper.PostV1RoutesRouteNameAttributesAttributeName)

	router.GET(options.BaseURL+"/v1/users", wrapper.GetV1Users)

	router.POST(options.BaseURL+"/v1/users", wrapper.PostV1Users)

	router.DELETE(options.BaseURL+"/v1/users/:user_name", wrapper.DeleteV1UsersUserName)

	router.GET(options.BaseURL+"/v1/users/:user_name", wrapper.GetV1UsersUserName)

	router.POST(options.BaseURL+"/v1/users/:user_name", wrapper.PostV1UsersUserName)

	return router
}
